
ATM_Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  00003a4c  00003ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800126  00800126  00003ba6  2**0
                  ALLOC
  3 .stab         00003d50  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001309  00000000  00000000  000078f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aafa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c794  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d34f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <main>
      8a:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e0       	ldi	r26, 0x09	; 9
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e0       	ldi	r24, 0x09	; 9
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <IBAN_Recieve>:
};
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/* Description : Function Receives IBAN from the Card ECU via SPI */
void IBAN_Recieve(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <IBAN_Recieve+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("Enter Card IBAN:");
     b54:	80 e6       	ldi	r24, 0x60	; 96
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	for (uint8 charIndex = 0; charIndex < 5; charIndex++) {
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <IBAN_Recieve+0x34>
		IBAN[charIndex] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	08 2f       	mov	r16, r24
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	0e 94 5f 1a 	call	0x34be	; 0x34be <SPI_sendReceiveByte>
     b6c:	f8 01       	movw	r30, r16
     b6e:	ef 5e       	subi	r30, 0xEF	; 239
     b70:	fe 4f       	sbci	r31, 0xFE	; 254
     b72:	80 83       	st	Z, r24
 *                      Functions Definitions                                  *
 *******************************************************************************/
/* Description : Function Receives IBAN from the Card ECU via SPI */
void IBAN_Recieve(void) {
	LCD_displayString("Enter Card IBAN:");
	for (uint8 charIndex = 0; charIndex < 5; charIndex++) {
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	8a 83       	std	Y+2, r24	; 0x02
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	80 f3       	brcs	.-32     	; 0xb60 <IBAN_Recieve+0x1a>
		IBAN[charIndex] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}
	for (uint8 charIndex = 0; charIndex < 5; charIndex++) {
     b80:	19 82       	std	Y+1, r1	; 0x01
     b82:	11 c0       	rjmp	.+34     	; 0xba6 <IBAN_Recieve+0x60>
		UserData.CardIBAN[charIndex] = IBAN[charIndex];
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	fc 01       	movw	r30, r24
     b92:	ef 5e       	subi	r30, 0xEF	; 239
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	80 81       	ld	r24, Z
     b98:	f9 01       	movw	r30, r18
     b9a:	e2 5d       	subi	r30, 0xD2	; 210
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	80 83       	st	Z, r24
void IBAN_Recieve(void) {
	LCD_displayString("Enter Card IBAN:");
	for (uint8 charIndex = 0; charIndex < 5; charIndex++) {
		IBAN[charIndex] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}
	for (uint8 charIndex = 0; charIndex < 5; charIndex++) {
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	85 30       	cpi	r24, 0x05	; 5
     baa:	60 f3       	brcs	.-40     	; 0xb84 <IBAN_Recieve+0x3e>
		UserData.CardIBAN[charIndex] = IBAN[charIndex];
	}
	FeaturesIndex = SaveIBAN_INDEX;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 2a 01 	sts	0x012A, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <SaveIBAN>:
/* Description : Function Saves IBAN in EEPROM */
void SaveIBAN(void) {
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	2f 97       	sbiw	r28, 0x0f	; 15
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
	uint8 charIndex = 0;
     bd4:	1f 86       	std	Y+15, r1	; 0x0f
	for (charIndex = 0; charIndex < 5; charIndex++) {
     bd6:	1f 86       	std	Y+15, r1	; 0x0f
     bd8:	83 c0       	rjmp	.+262    	; 0xce0 <SaveIBAN+0x120>
		EEPROM_writeByte((0x0000 + charIndex), UserData.CardIBAN[charIndex]);
     bda:	8f 85       	ldd	r24, Y+15	; 0x0f
     bdc:	48 2f       	mov	r20, r24
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	fc 01       	movw	r30, r24
     be8:	e2 5d       	subi	r30, 0xD2	; 210
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	20 81       	ld	r18, Z
     bee:	ca 01       	movw	r24, r20
     bf0:	62 2f       	mov	r22, r18
     bf2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <EEPROM_writeByte>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e2       	ldi	r26, 0x20	; 32
     bfc:	b1 e4       	ldi	r27, 0x41	; 65
     bfe:	8b 87       	std	Y+11, r24	; 0x0b
     c00:	9c 87       	std	Y+12, r25	; 0x0c
     c02:	ad 87       	std	Y+13, r26	; 0x0d
     c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c06:	6b 85       	ldd	r22, Y+11	; 0x0b
     c08:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a ef       	ldi	r20, 0xFA	; 250
     c14:	54 e4       	ldi	r21, 0x44	; 68
     c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8f 83       	std	Y+7, r24	; 0x07
     c20:	98 87       	std	Y+8, r25	; 0x08
     c22:	a9 87       	std	Y+9, r26	; 0x09
     c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c3a:	88 23       	and	r24, r24
     c3c:	2c f4       	brge	.+10     	; 0xc48 <SaveIBAN+0x88>
		__ticks = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	3f c0       	rjmp	.+126    	; 0xcc6 <SaveIBAN+0x106>
	else if (__tmp > 65535)
     c48:	6f 81       	ldd	r22, Y+7	; 0x07
     c4a:	78 85       	ldd	r23, Y+8	; 0x08
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	3f ef       	ldi	r19, 0xFF	; 255
     c54:	4f e7       	ldi	r20, 0x7F	; 127
     c56:	57 e4       	ldi	r21, 0x47	; 71
     c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5c:	18 16       	cp	r1, r24
     c5e:	4c f5       	brge	.+82     	; 0xcb2 <SaveIBAN+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c60:	6b 85       	ldd	r22, Y+11	; 0x0b
     c62:	7c 85       	ldd	r23, Y+12	; 0x0c
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <SaveIBAN+0xe8>
     c8a:	88 ec       	ldi	r24, 0xC8	; 200
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <SaveIBAN+0xd6>
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9e 83       	std	Y+6, r25	; 0x06
     ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	69 f7       	brne	.-38     	; 0xc8a <SaveIBAN+0xca>
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <SaveIBAN+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	89 85       	ldd	r24, Y+9	; 0x09
     cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	8d 83       	std	Y+5, r24	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <SaveIBAN+0x112>
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
	FeaturesIndex = SaveIBAN_INDEX;
}
/* Description : Function Saves IBAN in EEPROM */
void SaveIBAN(void) {
	uint8 charIndex = 0;
	for (charIndex = 0; charIndex < 5; charIndex++) {
     cda:	8f 85       	ldd	r24, Y+15	; 0x0f
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	8f 87       	std	Y+15, r24	; 0x0f
     ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce2:	85 30       	cpi	r24, 0x05	; 5
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <SaveIBAN+0x128>
     ce6:	79 cf       	rjmp	.-270    	; 0xbda <SaveIBAN+0x1a>
		EEPROM_writeByte((0x0000 + charIndex), UserData.CardIBAN[charIndex]);
		_delay_ms(10);
	}
	LCD_clearScreen();
     ce8:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	FeaturesIndex = Request_Pin_INDEX;
     cec:	85 e0       	ldi	r24, 0x05	; 5
     cee:	80 93 2a 01 	sts	0x012A, r24
}
     cf2:	2f 96       	adiw	r28, 0x0f	; 15
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <RequestPin>:
/* Description : Function Receives Card Pin from the user */
void RequestPin(void) {
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	2f 97       	sbiw	r28, 0x0f	; 15
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     d18:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	uint8 count = 0;
     d1c:	1f 86       	std	Y+15, r1	; 0x0f
	key = 0;
     d1e:	10 92 26 01 	sts	0x0126, r1
     d22:	10 92 27 01 	sts	0x0127, r1
     d26:	10 92 28 01 	sts	0x0128, r1
     d2a:	10 92 29 01 	sts	0x0129, r1
	LCD_displayString("Enter NEW Pass:");
     d2e:	81 e7       	ldi	r24, 0x71	; 113
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	LCD_moveCursor(1, 0);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
     d3e:	95 c0       	rjmp	.+298    	; 0xe6a <RequestPin+0x166>
	/*while loop to fill the first password entry array*/
	while ((key != '=') && (count < 4)) {
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a6 e9       	ldi	r26, 0x96	; 150
     d46:	b3 e4       	ldi	r27, 0x43	; 67
     d48:	8b 87       	std	Y+11, r24	; 0x0b
     d4a:	9c 87       	std	Y+12, r25	; 0x0c
     d4c:	ad 87       	std	Y+13, r26	; 0x0d
     d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	6b 85       	ldd	r22, Y+11	; 0x0b
     d52:	7c 85       	ldd	r23, Y+12	; 0x0c
     d54:	8d 85       	ldd	r24, Y+13	; 0x0d
     d56:	9e 85       	ldd	r25, Y+14	; 0x0e
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a ef       	ldi	r20, 0xFA	; 250
     d5e:	54 e4       	ldi	r21, 0x44	; 68
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	a9 87       	std	Y+9, r26	; 0x09
     d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d70:	6f 81       	ldd	r22, Y+7	; 0x07
     d72:	78 85       	ldd	r23, Y+8	; 0x08
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	2c f4       	brge	.+10     	; 0xd92 <RequestPin+0x8e>
		__ticks = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <RequestPin+0x10c>
	else if (__tmp > 65535)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	4c f5       	brge	.+82     	; 0xdfc <RequestPin+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dac:	7c 85       	ldd	r23, Y+12	; 0x0c
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <RequestPin+0xee>
     dd4:	88 ec       	ldi	r24, 0xC8	; 200
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <RequestPin+0xdc>
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <RequestPin+0xd0>
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <RequestPin+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <RequestPin+0x118>
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		UserData.CardPin[count]= key;
     e24:	8f 85       	ldd	r24, Y+15	; 0x0f
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	80 91 26 01 	lds	r24, 0x0126
     e2e:	90 91 27 01 	lds	r25, 0x0127
     e32:	a0 91 28 01 	lds	r26, 0x0128
     e36:	b0 91 29 01 	lds	r27, 0x0129
     e3a:	f9 01       	movw	r30, r18
     e3c:	e9 5c       	subi	r30, 0xC9	; 201
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 83       	st	Z, r24
		key = KEYPAD_getPressedKey();
     e42:	0e 94 16 13 	call	0x262c	; 0x262c <KEYPAD_getPressedKey>
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	80 93 26 01 	sts	0x0126, r24
     e52:	90 93 27 01 	sts	0x0127, r25
     e56:	a0 93 28 01 	sts	0x0128, r26
     e5a:	b0 93 29 01 	sts	0x0129, r27
		LCD_displayCharacter('*');
     e5e:	8a e2       	ldi	r24, 0x2A	; 42
     e60:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LCD_displayCharacter>
		count++;
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 count = 0;
	key = 0;
	LCD_displayString("Enter NEW Pass:");
	LCD_moveCursor(1, 0);
	/*while loop to fill the first password entry array*/
	while ((key != '=') && (count < 4)) {
     e6a:	80 91 26 01 	lds	r24, 0x0126
     e6e:	90 91 27 01 	lds	r25, 0x0127
     e72:	a0 91 28 01 	lds	r26, 0x0128
     e76:	b0 91 29 01 	lds	r27, 0x0129
     e7a:	8d 33       	cpi	r24, 0x3D	; 61
     e7c:	91 05       	cpc	r25, r1
     e7e:	a1 05       	cpc	r26, r1
     e80:	b1 05       	cpc	r27, r1
     e82:	21 f0       	breq	.+8      	; 0xe8c <RequestPin+0x188>
     e84:	8f 85       	ldd	r24, Y+15	; 0x0f
     e86:	84 30       	cpi	r24, 0x04	; 4
     e88:	08 f4       	brcc	.+2      	; 0xe8c <RequestPin+0x188>
     e8a:	5a cf       	rjmp	.-332    	; 0xd40 <RequestPin+0x3c>
		UserData.CardPin[count]= key;
		key = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		count++;
	}
	FeaturesIndex = Save_Pin_INDEX;
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	80 93 2a 01 	sts	0x012A, r24
}
     e92:	2f 96       	adiw	r28, 0x0f	; 15
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <SavePin>:
/* Description : Function Saves Card Pin in EEPROM */
void SavePin(void) {
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	60 97       	sbiw	r28, 0x10	; 16
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
	/*Saving the password sent by HMI ECU in the EEPROM and sets the Array to default value*/
	for (int i = 0; i < 4; i++) {
     eb8:	18 8a       	std	Y+16, r1	; 0x10
     eba:	1f 86       	std	Y+15, r1	; 0x0f
     ebc:	86 c0       	rjmp	.+268    	; 0xfca <SavePin+0x126>
		EEPROM_writeByte((0x0311 + i), UserData.CardPin[i]);
     ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec0:	98 89       	ldd	r25, Y+16	; 0x10
     ec2:	8f 5e       	subi	r24, 0xEF	; 239
     ec4:	9c 4f       	sbci	r25, 0xFC	; 252
     ec6:	9c 01       	movw	r18, r24
     ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eca:	98 89       	ldd	r25, Y+16	; 0x10
     ecc:	fc 01       	movw	r30, r24
     ece:	e9 5c       	subi	r30, 0xC9	; 201
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	40 81       	ld	r20, Z
     ed4:	c9 01       	movw	r24, r18
     ed6:	64 2f       	mov	r22, r20
     ed8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <EEPROM_writeByte>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 e2       	ldi	r26, 0x20	; 32
     ee2:	b1 e4       	ldi	r27, 0x41	; 65
     ee4:	8b 87       	std	Y+11, r24	; 0x0b
     ee6:	9c 87       	std	Y+12, r25	; 0x0c
     ee8:	ad 87       	std	Y+13, r26	; 0x0d
     eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4a ef       	ldi	r20, 0xFA	; 250
     efa:	54 e4       	ldi	r21, 0x44	; 68
     efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8f 83       	std	Y+7, r24	; 0x07
     f06:	98 87       	std	Y+8, r25	; 0x08
     f08:	a9 87       	std	Y+9, r26	; 0x09
     f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	78 85       	ldd	r23, Y+8	; 0x08
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f20:	88 23       	and	r24, r24
     f22:	2c f4       	brge	.+10     	; 0xf2e <SavePin+0x8a>
		__ticks = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	3f c0       	rjmp	.+126    	; 0xfac <SavePin+0x108>
	else if (__tmp > 65535)
     f2e:	6f 81       	ldd	r22, Y+7	; 0x07
     f30:	78 85       	ldd	r23, Y+8	; 0x08
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	4c f5       	brge	.+82     	; 0xf98 <SavePin+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	6b 85       	ldd	r22, Y+11	; 0x0b
     f48:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	9e 83       	std	Y+6, r25	; 0x06
     f6c:	8d 83       	std	Y+5, r24	; 0x05
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <SavePin+0xea>
     f70:	88 ec       	ldi	r24, 0xC8	; 200
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	8b 83       	std	Y+3, r24	; 0x03
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <SavePin+0xd8>
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	69 f7       	brne	.-38     	; 0xf70 <SavePin+0xcc>
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <SavePin+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f98:	6f 81       	ldd	r22, Y+7	; 0x07
     f9a:	78 85       	ldd	r23, Y+8	; 0x08
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	9e 81       	ldd	r25, Y+6	; 0x06
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <SavePin+0x114>
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
	FeaturesIndex = Save_Pin_INDEX;
}
/* Description : Function Saves Card Pin in EEPROM */
void SavePin(void) {
	/*Saving the password sent by HMI ECU in the EEPROM and sets the Array to default value*/
	for (int i = 0; i < 4; i++) {
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	98 89       	ldd	r25, Y+16	; 0x10
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	98 8b       	std	Y+16, r25	; 0x10
     fc8:	8f 87       	std	Y+15, r24	; 0x0f
     fca:	8f 85       	ldd	r24, Y+15	; 0x0f
     fcc:	98 89       	ldd	r25, Y+16	; 0x10
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	91 05       	cpc	r25, r1
     fd2:	0c f4       	brge	.+2      	; 0xfd6 <SavePin+0x132>
     fd4:	74 cf       	rjmp	.-280    	; 0xebe <SavePin+0x1a>
		EEPROM_writeByte((0x0311 + i), UserData.CardPin[i]);
		_delay_ms(10);
	}
	FeaturesIndex = User_Data_INDEX;
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	80 93 2a 01 	sts	0x012A, r24
}
     fdc:	60 96       	adiw	r28, 0x10	; 16
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <CheckPin>:
/* Description : Function to check the Card Pin from the user and the saved pin in EEPROM */
void CheckPin(void) {
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	e4 97       	sbiw	r28, 0x34	; 52
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1002:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	key=0;
    1006:	10 92 26 01 	sts	0x0126, r1
    100a:	10 92 27 01 	sts	0x0127, r1
    100e:	10 92 28 01 	sts	0x0128, r1
    1012:	10 92 29 01 	sts	0x0129, r1
	LCD_displayString("Enter Card Pin");
    1016:	81 e8       	ldi	r24, 0x81	; 129
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	uint8 SavedPin[4],count;
	uint8 check = 0;
    101e:	1f a6       	std	Y+47, r1	; 0x2f
	static uint8 Error = 0;
	LCD_moveCursor(1, 0);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
    1028:	9d c0       	rjmp	.+314    	; 0x1164 <CheckPin+0x176>
		/*while loop to fill the first password entry array*/
		while ((key != '=') && (count < 4)) {
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a6 e9       	ldi	r26, 0x96	; 150
    1030:	b3 e4       	ldi	r27, 0x43	; 67
    1032:	8f a3       	std	Y+39, r24	; 0x27
    1034:	98 a7       	std	Y+40, r25	; 0x28
    1036:	a9 a7       	std	Y+41, r26	; 0x29
    1038:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	6f a1       	ldd	r22, Y+39	; 0x27
    103c:	78 a5       	ldd	r23, Y+40	; 0x28
    103e:	89 a5       	ldd	r24, Y+41	; 0x29
    1040:	9a a5       	ldd	r25, Y+42	; 0x2a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	8b a3       	std	Y+35, r24	; 0x23
    1054:	9c a3       	std	Y+36, r25	; 0x24
    1056:	ad a3       	std	Y+37, r26	; 0x25
    1058:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    105a:	6b a1       	ldd	r22, Y+35	; 0x23
    105c:	7c a1       	ldd	r23, Y+36	; 0x24
    105e:	8d a1       	ldd	r24, Y+37	; 0x25
    1060:	9e a1       	ldd	r25, Y+38	; 0x26
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <CheckPin+0x8e>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9a a3       	std	Y+34, r25	; 0x22
    1078:	89 a3       	std	Y+33, r24	; 0x21
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <CheckPin+0x10c>
	else if (__tmp > 65535)
    107c:	6b a1       	ldd	r22, Y+35	; 0x23
    107e:	7c a1       	ldd	r23, Y+36	; 0x24
    1080:	8d a1       	ldd	r24, Y+37	; 0x25
    1082:	9e a1       	ldd	r25, Y+38	; 0x26
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <CheckPin+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	6f a1       	ldd	r22, Y+39	; 0x27
    1096:	78 a5       	ldd	r23, Y+40	; 0x28
    1098:	89 a5       	ldd	r24, Y+41	; 0x29
    109a:	9a a5       	ldd	r25, Y+42	; 0x2a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9a a3       	std	Y+34, r25	; 0x22
    10ba:	89 a3       	std	Y+33, r24	; 0x21
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <CheckPin+0xee>
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	98 a3       	std	Y+32, r25	; 0x20
    10c4:	8f 8f       	std	Y+31, r24	; 0x1f
    10c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10c8:	98 a1       	ldd	r25, Y+32	; 0x20
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <CheckPin+0xdc>
    10ce:	98 a3       	std	Y+32, r25	; 0x20
    10d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9a a3       	std	Y+34, r25	; 0x22
    10da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	89 a1       	ldd	r24, Y+33	; 0x21
    10de:	9a a1       	ldd	r25, Y+34	; 0x22
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <CheckPin+0xd0>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <CheckPin+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	6b a1       	ldd	r22, Y+35	; 0x23
    10e8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ea:	8d a1       	ldd	r24, Y+37	; 0x25
    10ec:	9e a1       	ldd	r25, Y+38	; 0x26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9a a3       	std	Y+34, r25	; 0x22
    10f8:	89 a3       	std	Y+33, r24	; 0x21
    10fa:	89 a1       	ldd	r24, Y+33	; 0x21
    10fc:	9a a1       	ldd	r25, Y+34	; 0x22
    10fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1100:	8d 8f       	std	Y+29, r24	; 0x1d
    1102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1104:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <CheckPin+0x118>
    110a:	9e 8f       	std	Y+30, r25	; 0x1e
    110c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			UserData.CardPin[count] = key;
    110e:	88 a9       	ldd	r24, Y+48	; 0x30
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	80 91 26 01 	lds	r24, 0x0126
    1118:	90 91 27 01 	lds	r25, 0x0127
    111c:	a0 91 28 01 	lds	r26, 0x0128
    1120:	b0 91 29 01 	lds	r27, 0x0129
    1124:	f9 01       	movw	r30, r18
    1126:	e9 5c       	subi	r30, 0xC9	; 201
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	80 83       	st	Z, r24
			key = KEYPAD_getPressedKey();
    112c:	0e 94 16 13 	call	0x262c	; 0x262c <KEYPAD_getPressedKey>
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e0       	ldi	r26, 0x00	; 0
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	80 93 26 01 	sts	0x0126, r24
    113c:	90 93 27 01 	sts	0x0127, r25
    1140:	a0 93 28 01 	sts	0x0128, r26
    1144:	b0 93 29 01 	sts	0x0129, r27
			LCD_intgerToString(UserData.CardPin[count]);
    1148:	88 a9       	ldd	r24, Y+48	; 0x30
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	fc 01       	movw	r30, r24
    1150:	e9 5c       	subi	r30, 0xC9	; 201
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	80 81       	ld	r24, Z
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 a5 19 	call	0x334a	; 0x334a <LCD_intgerToString>
			count++;
    115e:	88 a9       	ldd	r24, Y+48	; 0x30
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	88 ab       	std	Y+48, r24	; 0x30
	uint8 SavedPin[4],count;
	uint8 check = 0;
	static uint8 Error = 0;
	LCD_moveCursor(1, 0);
		/*while loop to fill the first password entry array*/
		while ((key != '=') && (count < 4)) {
    1164:	80 91 26 01 	lds	r24, 0x0126
    1168:	90 91 27 01 	lds	r25, 0x0127
    116c:	a0 91 28 01 	lds	r26, 0x0128
    1170:	b0 91 29 01 	lds	r27, 0x0129
    1174:	8d 33       	cpi	r24, 0x3D	; 61
    1176:	91 05       	cpc	r25, r1
    1178:	a1 05       	cpc	r26, r1
    117a:	b1 05       	cpc	r27, r1
    117c:	21 f0       	breq	.+8      	; 0x1186 <CheckPin+0x198>
    117e:	88 a9       	ldd	r24, Y+48	; 0x30
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	08 f4       	brcc	.+2      	; 0x1186 <CheckPin+0x198>
    1184:	52 cf       	rjmp	.-348    	; 0x102a <CheckPin+0x3c>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a8 e4       	ldi	r26, 0x48	; 72
    118c:	b3 e4       	ldi	r27, 0x43	; 67
    118e:	89 8f       	std	Y+25, r24	; 0x19
    1190:	9a 8f       	std	Y+26, r25	; 0x1a
    1192:	ab 8f       	std	Y+27, r26	; 0x1b
    1194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	69 8d       	ldd	r22, Y+25	; 0x19
    1198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a ef       	ldi	r20, 0xFA	; 250
    11a4:	54 e4       	ldi	r21, 0x44	; 68
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8d 8b       	std	Y+21, r24	; 0x15
    11b0:	9e 8b       	std	Y+22, r25	; 0x16
    11b2:	af 8b       	std	Y+23, r26	; 0x17
    11b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b6:	6d 89       	ldd	r22, Y+21	; 0x15
    11b8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ba:	8f 89       	ldd	r24, Y+23	; 0x17
    11bc:	98 8d       	ldd	r25, Y+24	; 0x18
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <CheckPin+0x1ea>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <CheckPin+0x268>
	else if (__tmp > 65535)
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <CheckPin+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	69 8d       	ldd	r22, Y+25	; 0x19
    11f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <CheckPin+0x24a>
    121a:	88 ec       	ldi	r24, 0xC8	; 200
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	9a 8b       	std	Y+18, r25	; 0x12
    1220:	89 8b       	std	Y+17, r24	; 0x11
    1222:	89 89       	ldd	r24, Y+17	; 0x11
    1224:	9a 89       	ldd	r25, Y+18	; 0x12
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <CheckPin+0x238>
    122a:	9a 8b       	std	Y+18, r25	; 0x12
    122c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8b 89       	ldd	r24, Y+19	; 0x13
    123a:	9c 89       	ldd	r25, Y+20	; 0x14
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <CheckPin+0x22c>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <CheckPin+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9c 8b       	std	Y+20, r25	; 0x14
    1254:	8b 8b       	std	Y+19, r24	; 0x13
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	98 89       	ldd	r25, Y+16	; 0x10
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <CheckPin+0x274>
    1266:	98 8b       	std	Y+16, r25	; 0x10
    1268:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_intgerToString(UserData.CardPin[count]);
			count++;
		}
		_delay_ms(200);
	/*Reading the saved password in the EEPROM*/
	for (int i = 0; i < 4; i++) {
    126a:	1e a6       	std	Y+46, r1	; 0x2e
    126c:	1d a6       	std	Y+45, r1	; 0x2d
    126e:	87 c0       	rjmp	.+270    	; 0x137e <CheckPin+0x390>
		EEPROM_readByte((0x0311 + i), &SavedPin[i]);
    1270:	8d a5       	ldd	r24, Y+45	; 0x2d
    1272:	9e a5       	ldd	r25, Y+46	; 0x2e
    1274:	8f 5e       	subi	r24, 0xEF	; 239
    1276:	9c 4f       	sbci	r25, 0xFC	; 252
    1278:	ac 01       	movw	r20, r24
    127a:	8d a5       	ldd	r24, Y+45	; 0x2d
    127c:	9e a5       	ldd	r25, Y+46	; 0x2e
    127e:	9e 01       	movw	r18, r28
    1280:	2f 5c       	subi	r18, 0xCF	; 207
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	28 0f       	add	r18, r24
    1286:	39 1f       	adc	r19, r25
    1288:	ca 01       	movw	r24, r20
    128a:	b9 01       	movw	r22, r18
    128c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <EEPROM_readByte>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e2       	ldi	r26, 0x20	; 32
    1296:	b1 e4       	ldi	r27, 0x41	; 65
    1298:	8b 87       	std	Y+11, r24	; 0x0b
    129a:	9c 87       	std	Y+12, r25	; 0x0c
    129c:	ad 87       	std	Y+13, r26	; 0x0d
    129e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a ef       	ldi	r20, 0xFA	; 250
    12ae:	54 e4       	ldi	r21, 0x44	; 68
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8f 83       	std	Y+7, r24	; 0x07
    12ba:	98 87       	std	Y+8, r25	; 0x08
    12bc:	a9 87       	std	Y+9, r26	; 0x09
    12be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c0:	6f 81       	ldd	r22, Y+7	; 0x07
    12c2:	78 85       	ldd	r23, Y+8	; 0x08
    12c4:	89 85       	ldd	r24, Y+9	; 0x09
    12c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <CheckPin+0x2f4>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <CheckPin+0x372>
	else if (__tmp > 65535)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <CheckPin+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1300:	9e 85       	ldd	r25, Y+14	; 0x0e
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <CheckPin+0x354>
    1324:	88 ec       	ldi	r24, 0xC8	; 200
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c 83       	std	Y+4, r25	; 0x04
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <CheckPin+0x342>
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <CheckPin+0x336>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <CheckPin+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <CheckPin+0x37e>
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
			LCD_intgerToString(UserData.CardPin[count]);
			count++;
		}
		_delay_ms(200);
	/*Reading the saved password in the EEPROM*/
	for (int i = 0; i < 4; i++) {
    1374:	8d a5       	ldd	r24, Y+45	; 0x2d
    1376:	9e a5       	ldd	r25, Y+46	; 0x2e
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	9e a7       	std	Y+46, r25	; 0x2e
    137c:	8d a7       	std	Y+45, r24	; 0x2d
    137e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1380:	9e a5       	ldd	r25, Y+46	; 0x2e
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	91 05       	cpc	r25, r1
    1386:	0c f4       	brge	.+2      	; 0x138a <CheckPin+0x39c>
    1388:	73 cf       	rjmp	.-282    	; 0x1270 <CheckPin+0x282>
		EEPROM_readByte((0x0311 + i), &SavedPin[i]);
		_delay_ms(10);
	}
	/*checking if the password sent by HMI ECU matches the one saved in the EEPROM and
	 * count the number of matching of the elements*/
	for (int i = 0; i < 5; i++) {
    138a:	1c a6       	std	Y+44, r1	; 0x2c
    138c:	1b a6       	std	Y+43, r1	; 0x2b
    138e:	18 c0       	rjmp	.+48     	; 0x13c0 <CheckPin+0x3d2>
		if (UserData.CardPin[i] == SavedPin[i]) {
    1390:	8b a5       	ldd	r24, Y+43	; 0x2b
    1392:	9c a5       	ldd	r25, Y+44	; 0x2c
    1394:	fc 01       	movw	r30, r24
    1396:	e9 5c       	subi	r30, 0xC9	; 201
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	40 81       	ld	r20, Z
    139c:	2b a5       	ldd	r18, Y+43	; 0x2b
    139e:	3c a5       	ldd	r19, Y+44	; 0x2c
    13a0:	ce 01       	movw	r24, r28
    13a2:	c1 96       	adiw	r24, 0x31	; 49
    13a4:	fc 01       	movw	r30, r24
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	80 81       	ld	r24, Z
    13ac:	48 17       	cp	r20, r24
    13ae:	19 f4       	brne	.+6      	; 0x13b6 <CheckPin+0x3c8>
			check++;
    13b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	8f a7       	std	Y+47, r24	; 0x2f
		EEPROM_readByte((0x0311 + i), &SavedPin[i]);
		_delay_ms(10);
	}
	/*checking if the password sent by HMI ECU matches the one saved in the EEPROM and
	 * count the number of matching of the elements*/
	for (int i = 0; i < 5; i++) {
    13b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    13b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	9c a7       	std	Y+44, r25	; 0x2c
    13be:	8b a7       	std	Y+43, r24	; 0x2b
    13c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13c4:	85 30       	cpi	r24, 0x05	; 5
    13c6:	91 05       	cpc	r25, r1
    13c8:	1c f3       	brlt	.-58     	; 0x1390 <CheckPin+0x3a2>
			check++;
		}
	}
	/*if they match sending to HMI ECU they match and returns SUCCESS*/

	if (check == 5) {
    13ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    13cc:	85 30       	cpi	r24, 0x05	; 5
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <CheckPin+0x3ea>
		FeaturesIndex = User_Data_INDEX;
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	80 93 2a 01 	sts	0x012A, r24
    13d6:	1b c0       	rjmp	.+54     	; 0x140e <CheckPin+0x420>
	}
	/*if they dont match sending to HMI ECU they dont match and returns ERROR*/
	else {
		if (Error < 3) {
    13d8:	80 91 2b 01 	lds	r24, 0x012B
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	48 f4       	brcc	.+18     	; 0x13f2 <CheckPin+0x404>
			Error++;
    13e0:	80 91 2b 01 	lds	r24, 0x012B
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	80 93 2b 01 	sts	0x012B, r24
			FeaturesIndex = Request_Pin_INDEX;
    13ea:	85 e0       	ldi	r24, 0x05	; 5
    13ec:	80 93 2a 01 	sts	0x012A, r24
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <CheckPin+0x420>
		} else {
			LCD_displayString("Contact Bank");
    13f2:	80 e9       	ldi	r24, 0x90	; 144
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
			LCD_moveCursor(1, 0);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
			LCD_displayString("For Card Recovery");
    1402:	8d e9       	ldi	r24, 0x9D	; 157
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
			FeaturesIndex = IBAN_Recieve_INDEX;
    140a:	10 92 2a 01 	sts	0x012A, r1
		}
	}
}
    140e:	e4 96       	adiw	r28, 0x34	; 52
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <User_Data>:
/* Description : Function displays the system features for the user*/
void User_Data(void) {
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <User_Data+0x6>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	uint8 option = 0;
    142c:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    142e:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	LCD_displayString("Balance: ");
    1432:	8f ea       	ldi	r24, 0xAF	; 175
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	LCD_intgerToString(UserData.balance);
    143a:	80 91 33 01 	lds	r24, 0x0133
    143e:	90 91 34 01 	lds	r25, 0x0134
    1442:	a0 91 35 01 	lds	r26, 0x0135
    1446:	b0 91 36 01 	lds	r27, 0x0136
    144a:	0e 94 a5 19 	call	0x334a	; 0x334a <LCD_intgerToString>
	LCD_moveCursor(1, 0);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
	LCD_displayString("+:Withdraw");
    1456:	89 eb       	ldi	r24, 0xB9	; 185
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	LCD_moveCursor(2, 0);
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
	LCD_displayString("-:Deposit");
    1466:	84 ec       	ldi	r24, 0xC4	; 196
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	LCD_moveCursor(3, 0);
    146e:	83 e0       	ldi	r24, 0x03	; 3
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
	LCD_displayString("*:Eject Card");
    1476:	8e ec       	ldi	r24, 0xCE	; 206
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	option = KEYPAD_getPressedKey();
    147e:	0e 94 16 13 	call	0x262c	; 0x262c <KEYPAD_getPressedKey>
    1482:	89 83       	std	Y+1, r24	; 0x01
	switch (option) {
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3b 83       	std	Y+3, r19	; 0x03
    148c:	2a 83       	std	Y+2, r18	; 0x02
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	8b 32       	cpi	r24, 0x2B	; 43
    1494:	91 05       	cpc	r25, r1
    1496:	79 f0       	breq	.+30     	; 0x14b6 <User_Data+0x96>
    1498:	2a 81       	ldd	r18, Y+2	; 0x02
    149a:	3b 81       	ldd	r19, Y+3	; 0x03
    149c:	2d 32       	cpi	r18, 0x2D	; 45
    149e:	31 05       	cpc	r19, r1
    14a0:	31 f0       	breq	.+12     	; 0x14ae <User_Data+0x8e>
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	8a 32       	cpi	r24, 0x2A	; 42
    14a8:	91 05       	cpc	r25, r1
    14aa:	49 f0       	breq	.+18     	; 0x14be <User_Data+0x9e>
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <User_Data+0xa8>
	case '-': {
		FeaturesIndex = Deposit_Option_INDEX;
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	80 93 2a 01 	sts	0x012A, r24
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <User_Data+0xa8>
		break;
	}
	case '+': {
		FeaturesIndex = Withdraw_Option_INDEX;
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	80 93 2a 01 	sts	0x012A, r24
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <User_Data+0xa8>
		break;
	}
	case '*': {
		LCD_clearScreen();
    14be:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
		FeaturesIndex = Check_Pin_INDEX;
    14c2:	87 e0       	ldi	r24, 0x07	; 7
    14c4:	80 93 2a 01 	sts	0x012A, r24
	}
	}
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <DepositOption>:
/* Description : Function displays the system feature "Deposit" for the user and process
 * the desired amount  */
void DepositOption(void) {
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	ae 97       	sbiw	r28, 0x2e	; 46
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
	key = 0;
    14e8:	10 92 26 01 	sts	0x0126, r1
    14ec:	10 92 27 01 	sts	0x0127, r1
    14f0:	10 92 28 01 	sts	0x0128, r1
    14f4:	10 92 29 01 	sts	0x0129, r1
	uint32 amount = 0;
    14f8:	1b a6       	std	Y+43, r1	; 0x2b
    14fa:	1c a6       	std	Y+44, r1	; 0x2c
    14fc:	1d a6       	std	Y+45, r1	; 0x2d
    14fe:	1e a6       	std	Y+46, r1	; 0x2e
	LCD_clearScreen();
    1500:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	LCD_displayString("Enter Amount:");
    1504:	8b ed       	ldi	r24, 0xDB	; 219
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	LCD_moveCursor(1, 0);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
    1514:	b0 c0       	rjmp	.+352    	; 0x1676 <DepositOption+0x1a2>
	while (key != '=') {
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a8 e4       	ldi	r26, 0x48	; 72
    151c:	b3 e4       	ldi	r27, 0x43	; 67
    151e:	8f a3       	std	Y+39, r24	; 0x27
    1520:	98 a7       	std	Y+40, r25	; 0x28
    1522:	a9 a7       	std	Y+41, r26	; 0x29
    1524:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	6f a1       	ldd	r22, Y+39	; 0x27
    1528:	78 a5       	ldd	r23, Y+40	; 0x28
    152a:	89 a5       	ldd	r24, Y+41	; 0x29
    152c:	9a a5       	ldd	r25, Y+42	; 0x2a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a ef       	ldi	r20, 0xFA	; 250
    1534:	54 e4       	ldi	r21, 0x44	; 68
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8b a3       	std	Y+35, r24	; 0x23
    1540:	9c a3       	std	Y+36, r25	; 0x24
    1542:	ad a3       	std	Y+37, r26	; 0x25
    1544:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1546:	6b a1       	ldd	r22, Y+35	; 0x23
    1548:	7c a1       	ldd	r23, Y+36	; 0x24
    154a:	8d a1       	ldd	r24, Y+37	; 0x25
    154c:	9e a1       	ldd	r25, Y+38	; 0x26
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	2c f4       	brge	.+10     	; 0x1568 <DepositOption+0x94>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9a a3       	std	Y+34, r25	; 0x22
    1564:	89 a3       	std	Y+33, r24	; 0x21
    1566:	3f c0       	rjmp	.+126    	; 0x15e6 <DepositOption+0x112>
	else if (__tmp > 65535)
    1568:	6b a1       	ldd	r22, Y+35	; 0x23
    156a:	7c a1       	ldd	r23, Y+36	; 0x24
    156c:	8d a1       	ldd	r24, Y+37	; 0x25
    156e:	9e a1       	ldd	r25, Y+38	; 0x26
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157c:	18 16       	cp	r1, r24
    157e:	4c f5       	brge	.+82     	; 0x15d2 <DepositOption+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1580:	6f a1       	ldd	r22, Y+39	; 0x27
    1582:	78 a5       	ldd	r23, Y+40	; 0x28
    1584:	89 a5       	ldd	r24, Y+41	; 0x29
    1586:	9a a5       	ldd	r25, Y+42	; 0x2a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9a a3       	std	Y+34, r25	; 0x22
    15a6:	89 a3       	std	Y+33, r24	; 0x21
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <DepositOption+0xf4>
    15aa:	88 ec       	ldi	r24, 0xC8	; 200
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	98 a3       	std	Y+32, r25	; 0x20
    15b0:	8f 8f       	std	Y+31, r24	; 0x1f
    15b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15b4:	98 a1       	ldd	r25, Y+32	; 0x20
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <DepositOption+0xe2>
    15ba:	98 a3       	std	Y+32, r25	; 0x20
    15bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	89 a1       	ldd	r24, Y+33	; 0x21
    15c0:	9a a1       	ldd	r25, Y+34	; 0x22
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9a a3       	std	Y+34, r25	; 0x22
    15c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	9a a1       	ldd	r25, Y+34	; 0x22
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	69 f7       	brne	.-38     	; 0x15aa <DepositOption+0xd6>
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <DepositOption+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6b a1       	ldd	r22, Y+35	; 0x23
    15d4:	7c a1       	ldd	r23, Y+36	; 0x24
    15d6:	8d a1       	ldd	r24, Y+37	; 0x25
    15d8:	9e a1       	ldd	r25, Y+38	; 0x26
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9a a3       	std	Y+34, r25	; 0x22
    15e4:	89 a3       	std	Y+33, r24	; 0x21
    15e6:	89 a1       	ldd	r24, Y+33	; 0x21
    15e8:	9a a1       	ldd	r25, Y+34	; 0x22
    15ea:	9e 8f       	std	Y+30, r25	; 0x1e
    15ec:	8d 8f       	std	Y+29, r24	; 0x1d
    15ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <DepositOption+0x11e>
    15f6:	9e 8f       	std	Y+30, r25	; 0x1e
    15f8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		amount *= 10;
    15fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    15fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    15fe:	ad a5       	ldd	r26, Y+45	; 0x2d
    1600:	be a5       	ldd	r27, Y+46	; 0x2e
    1602:	2a e0       	ldi	r18, 0x0A	; 10
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__mulsi3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8b a7       	std	Y+43, r24	; 0x2b
    1618:	9c a7       	std	Y+44, r25	; 0x2c
    161a:	ad a7       	std	Y+45, r26	; 0x2d
    161c:	be a7       	std	Y+46, r27	; 0x2e
		amount += key;
    161e:	20 91 26 01 	lds	r18, 0x0126
    1622:	30 91 27 01 	lds	r19, 0x0127
    1626:	40 91 28 01 	lds	r20, 0x0128
    162a:	50 91 29 01 	lds	r21, 0x0129
    162e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1630:	9c a5       	ldd	r25, Y+44	; 0x2c
    1632:	ad a5       	ldd	r26, Y+45	; 0x2d
    1634:	be a5       	ldd	r27, Y+46	; 0x2e
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	a4 1f       	adc	r26, r20
    163c:	b5 1f       	adc	r27, r21
    163e:	8b a7       	std	Y+43, r24	; 0x2b
    1640:	9c a7       	std	Y+44, r25	; 0x2c
    1642:	ad a7       	std	Y+45, r26	; 0x2d
    1644:	be a7       	std	Y+46, r27	; 0x2e
		key = KEYPAD_getPressedKey();
    1646:	0e 94 16 13 	call	0x262c	; 0x262c <KEYPAD_getPressedKey>
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	80 93 26 01 	sts	0x0126, r24
    1656:	90 93 27 01 	sts	0x0127, r25
    165a:	a0 93 28 01 	sts	0x0128, r26
    165e:	b0 93 29 01 	sts	0x0129, r27
		LCD_intgerToString(key);
    1662:	80 91 26 01 	lds	r24, 0x0126
    1666:	90 91 27 01 	lds	r25, 0x0127
    166a:	a0 91 28 01 	lds	r26, 0x0128
    166e:	b0 91 29 01 	lds	r27, 0x0129
    1672:	0e 94 a5 19 	call	0x334a	; 0x334a <LCD_intgerToString>
	key = 0;
	uint32 amount = 0;
	LCD_clearScreen();
	LCD_displayString("Enter Amount:");
	LCD_moveCursor(1, 0);
	while (key != '=') {
    1676:	80 91 26 01 	lds	r24, 0x0126
    167a:	90 91 27 01 	lds	r25, 0x0127
    167e:	a0 91 28 01 	lds	r26, 0x0128
    1682:	b0 91 29 01 	lds	r27, 0x0129
    1686:	8d 33       	cpi	r24, 0x3D	; 61
    1688:	91 05       	cpc	r25, r1
    168a:	a1 05       	cpc	r26, r1
    168c:	b1 05       	cpc	r27, r1
    168e:	09 f0       	breq	.+2      	; 0x1692 <DepositOption+0x1be>
    1690:	42 cf       	rjmp	.-380    	; 0x1516 <DepositOption+0x42>
		amount *= 10;
		amount += key;
		key = KEYPAD_getPressedKey();
		LCD_intgerToString(key);
	}
	key = 0;
    1692:	10 92 26 01 	sts	0x0126, r1
    1696:	10 92 27 01 	sts	0x0127, r1
    169a:	10 92 28 01 	sts	0x0128, r1
    169e:	10 92 29 01 	sts	0x0129, r1
	LCD_clearScreen();
    16a2:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	DcMotor_Rotate(CLOCKWISE, 75);
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	6b e4       	ldi	r22, 0x4B	; 75
    16aa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DcMotor_Rotate>
	LCD_displayString("Please Wait ...");
    16ae:	89 ee       	ldi	r24, 0xE9	; 233
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	aa ef       	ldi	r26, 0xFA	; 250
    16bc:	b4 e4       	ldi	r27, 0x44	; 68
    16be:	89 8f       	std	Y+25, r24	; 0x19
    16c0:	9a 8f       	std	Y+26, r25	; 0x1a
    16c2:	ab 8f       	std	Y+27, r26	; 0x1b
    16c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c6:	69 8d       	ldd	r22, Y+25	; 0x19
    16c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a ef       	ldi	r20, 0xFA	; 250
    16d4:	54 e4       	ldi	r21, 0x44	; 68
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8d 8b       	std	Y+21, r24	; 0x15
    16e0:	9e 8b       	std	Y+22, r25	; 0x16
    16e2:	af 8b       	std	Y+23, r26	; 0x17
    16e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16e6:	6d 89       	ldd	r22, Y+21	; 0x15
    16e8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ea:	8f 89       	ldd	r24, Y+23	; 0x17
    16ec:	98 8d       	ldd	r25, Y+24	; 0x18
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fa:	88 23       	and	r24, r24
    16fc:	2c f4       	brge	.+10     	; 0x1708 <DepositOption+0x234>
		__ticks = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9c 8b       	std	Y+20, r25	; 0x14
    1704:	8b 8b       	std	Y+19, r24	; 0x13
    1706:	3f c0       	rjmp	.+126    	; 0x1786 <DepositOption+0x2b2>
	else if (__tmp > 65535)
    1708:	6d 89       	ldd	r22, Y+21	; 0x15
    170a:	7e 89       	ldd	r23, Y+22	; 0x16
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171c:	18 16       	cp	r1, r24
    171e:	4c f5       	brge	.+82     	; 0x1772 <DepositOption+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1720:	69 8d       	ldd	r22, Y+25	; 0x19
    1722:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <DepositOption+0x294>
    174a:	88 ec       	ldi	r24, 0xC8	; 200
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9a 8b       	std	Y+18, r25	; 0x12
    1750:	89 8b       	std	Y+17, r24	; 0x11
    1752:	89 89       	ldd	r24, Y+17	; 0x11
    1754:	9a 89       	ldd	r25, Y+18	; 0x12
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <DepositOption+0x282>
    175a:	9a 8b       	std	Y+18, r25	; 0x12
    175c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175e:	8b 89       	ldd	r24, Y+19	; 0x13
    1760:	9c 89       	ldd	r25, Y+20	; 0x14
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1768:	8b 89       	ldd	r24, Y+19	; 0x13
    176a:	9c 89       	ldd	r25, Y+20	; 0x14
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	69 f7       	brne	.-38     	; 0x174a <DepositOption+0x276>
    1770:	14 c0       	rjmp	.+40     	; 0x179a <DepositOption+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1772:	6d 89       	ldd	r22, Y+21	; 0x15
    1774:	7e 89       	ldd	r23, Y+22	; 0x16
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9c 8b       	std	Y+20, r25	; 0x14
    1784:	8b 8b       	std	Y+19, r24	; 0x13
    1786:	8b 89       	ldd	r24, Y+19	; 0x13
    1788:	9c 89       	ldd	r25, Y+20	; 0x14
    178a:	98 8b       	std	Y+16, r25	; 0x10
    178c:	8f 87       	std	Y+15, r24	; 0x0f
    178e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1790:	98 89       	ldd	r25, Y+16	; 0x10
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <DepositOption+0x2be>
    1796:	98 8b       	std	Y+16, r25	; 0x10
    1798:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	LCD_clearScreen();
    179a:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	LCD_displayString("New Balance is:");
    179e:	89 ef       	ldi	r24, 0xF9	; 249
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	UserData.balance += amount;
    17a6:	20 91 33 01 	lds	r18, 0x0133
    17aa:	30 91 34 01 	lds	r19, 0x0134
    17ae:	40 91 35 01 	lds	r20, 0x0135
    17b2:	50 91 36 01 	lds	r21, 0x0136
    17b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ba:	ad a5       	ldd	r26, Y+45	; 0x2d
    17bc:	be a5       	ldd	r27, Y+46	; 0x2e
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	a4 1f       	adc	r26, r20
    17c4:	b5 1f       	adc	r27, r21
    17c6:	80 93 33 01 	sts	0x0133, r24
    17ca:	90 93 34 01 	sts	0x0134, r25
    17ce:	a0 93 35 01 	sts	0x0135, r26
    17d2:	b0 93 36 01 	sts	0x0136, r27
	LCD_moveCursor(1, 0);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
	LCD_intgerToString(UserData.balance);
    17de:	80 91 33 01 	lds	r24, 0x0133
    17e2:	90 91 34 01 	lds	r25, 0x0134
    17e6:	a0 91 35 01 	lds	r26, 0x0135
    17ea:	b0 91 36 01 	lds	r27, 0x0136
    17ee:	0e 94 a5 19 	call	0x334a	; 0x334a <LCD_intgerToString>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	aa ef       	ldi	r26, 0xFA	; 250
    17f8:	b4 e4       	ldi	r27, 0x44	; 68
    17fa:	8b 87       	std	Y+11, r24	; 0x0b
    17fc:	9c 87       	std	Y+12, r25	; 0x0c
    17fe:	ad 87       	std	Y+13, r26	; 0x0d
    1800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8f 83       	std	Y+7, r24	; 0x07
    181c:	98 87       	std	Y+8, r25	; 0x08
    181e:	a9 87       	std	Y+9, r26	; 0x09
    1820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <DepositOption+0x370>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <DepositOption+0x3ee>
	else if (__tmp > 65535)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <DepositOption+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <DepositOption+0x3d0>
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <DepositOption+0x3be>
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <DepositOption+0x3b2>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <DepositOption+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <DepositOption+0x3fa>
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	FeaturesIndex = User_Data_INDEX;
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	80 93 2a 01 	sts	0x012A, r24
}
    18dc:	ae 96       	adiw	r28, 0x2e	; 46
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <WithdrawOption>:
/* Description : Function displays the system feature "WithDraw" for the user and process
 * the desired amount  */
void WithdrawOption(void) {
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	ae 97       	sbiw	r28, 0x2e	; 46
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
	key = 0;
    190a:	10 92 26 01 	sts	0x0126, r1
    190e:	10 92 27 01 	sts	0x0127, r1
    1912:	10 92 28 01 	sts	0x0128, r1
    1916:	10 92 29 01 	sts	0x0129, r1
	uint32 amount = 0;
    191a:	1b a6       	std	Y+43, r1	; 0x2b
    191c:	1c a6       	std	Y+44, r1	; 0x2c
    191e:	1d a6       	std	Y+45, r1	; 0x2d
    1920:	1e a6       	std	Y+46, r1	; 0x2e
	LCD_clearScreen();
    1922:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	LCD_displayString("Enter Amount:");
    1926:	8b ed       	ldi	r24, 0xDB	; 219
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	LCD_moveCursor(1, 0);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
    1936:	b0 c0       	rjmp	.+352    	; 0x1a98 <WithdrawOption+0x1aa>
	while (key != '=') {
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a8 e4       	ldi	r26, 0x48	; 72
    193e:	b3 e4       	ldi	r27, 0x43	; 67
    1940:	8f a3       	std	Y+39, r24	; 0x27
    1942:	98 a7       	std	Y+40, r25	; 0x28
    1944:	a9 a7       	std	Y+41, r26	; 0x29
    1946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	6f a1       	ldd	r22, Y+39	; 0x27
    194a:	78 a5       	ldd	r23, Y+40	; 0x28
    194c:	89 a5       	ldd	r24, Y+41	; 0x29
    194e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a ef       	ldi	r20, 0xFA	; 250
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8b a3       	std	Y+35, r24	; 0x23
    1962:	9c a3       	std	Y+36, r25	; 0x24
    1964:	ad a3       	std	Y+37, r26	; 0x25
    1966:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1968:	6b a1       	ldd	r22, Y+35	; 0x23
    196a:	7c a1       	ldd	r23, Y+36	; 0x24
    196c:	8d a1       	ldd	r24, Y+37	; 0x25
    196e:	9e a1       	ldd	r25, Y+38	; 0x26
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <WithdrawOption+0x9c>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9a a3       	std	Y+34, r25	; 0x22
    1986:	89 a3       	std	Y+33, r24	; 0x21
    1988:	3f c0       	rjmp	.+126    	; 0x1a08 <WithdrawOption+0x11a>
	else if (__tmp > 65535)
    198a:	6b a1       	ldd	r22, Y+35	; 0x23
    198c:	7c a1       	ldd	r23, Y+36	; 0x24
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	4c f5       	brge	.+82     	; 0x19f4 <WithdrawOption+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	6f a1       	ldd	r22, Y+39	; 0x27
    19a4:	78 a5       	ldd	r23, Y+40	; 0x28
    19a6:	89 a5       	ldd	r24, Y+41	; 0x29
    19a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9a a3       	std	Y+34, r25	; 0x22
    19c8:	89 a3       	std	Y+33, r24	; 0x21
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <WithdrawOption+0xfc>
    19cc:	88 ec       	ldi	r24, 0xC8	; 200
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	98 a3       	std	Y+32, r25	; 0x20
    19d2:	8f 8f       	std	Y+31, r24	; 0x1f
    19d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d6:	98 a1       	ldd	r25, Y+32	; 0x20
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <WithdrawOption+0xea>
    19dc:	98 a3       	std	Y+32, r25	; 0x20
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	89 a1       	ldd	r24, Y+33	; 0x21
    19e2:	9a a1       	ldd	r25, Y+34	; 0x22
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9a a3       	std	Y+34, r25	; 0x22
    19e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	89 a1       	ldd	r24, Y+33	; 0x21
    19ec:	9a a1       	ldd	r25, Y+34	; 0x22
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <WithdrawOption+0xde>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <WithdrawOption+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	6b a1       	ldd	r22, Y+35	; 0x23
    19f6:	7c a1       	ldd	r23, Y+36	; 0x24
    19f8:	8d a1       	ldd	r24, Y+37	; 0x25
    19fa:	9e a1       	ldd	r25, Y+38	; 0x26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9a a3       	std	Y+34, r25	; 0x22
    1a06:	89 a3       	std	Y+33, r24	; 0x21
    1a08:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <WithdrawOption+0x126>
    1a18:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		amount *= 10;
    1a1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a20:	ad a5       	ldd	r26, Y+45	; 0x2d
    1a22:	be a5       	ldd	r27, Y+46	; 0x2e
    1a24:	2a e0       	ldi	r18, 0x0A	; 10
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__mulsi3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8b a7       	std	Y+43, r24	; 0x2b
    1a3a:	9c a7       	std	Y+44, r25	; 0x2c
    1a3c:	ad a7       	std	Y+45, r26	; 0x2d
    1a3e:	be a7       	std	Y+46, r27	; 0x2e
		amount += key;
    1a40:	20 91 26 01 	lds	r18, 0x0126
    1a44:	30 91 27 01 	lds	r19, 0x0127
    1a48:	40 91 28 01 	lds	r20, 0x0128
    1a4c:	50 91 29 01 	lds	r21, 0x0129
    1a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a54:	ad a5       	ldd	r26, Y+45	; 0x2d
    1a56:	be a5       	ldd	r27, Y+46	; 0x2e
    1a58:	82 0f       	add	r24, r18
    1a5a:	93 1f       	adc	r25, r19
    1a5c:	a4 1f       	adc	r26, r20
    1a5e:	b5 1f       	adc	r27, r21
    1a60:	8b a7       	std	Y+43, r24	; 0x2b
    1a62:	9c a7       	std	Y+44, r25	; 0x2c
    1a64:	ad a7       	std	Y+45, r26	; 0x2d
    1a66:	be a7       	std	Y+46, r27	; 0x2e
		key = KEYPAD_getPressedKey();
    1a68:	0e 94 16 13 	call	0x262c	; 0x262c <KEYPAD_getPressedKey>
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	80 93 26 01 	sts	0x0126, r24
    1a78:	90 93 27 01 	sts	0x0127, r25
    1a7c:	a0 93 28 01 	sts	0x0128, r26
    1a80:	b0 93 29 01 	sts	0x0129, r27
		LCD_intgerToString(key);
    1a84:	80 91 26 01 	lds	r24, 0x0126
    1a88:	90 91 27 01 	lds	r25, 0x0127
    1a8c:	a0 91 28 01 	lds	r26, 0x0128
    1a90:	b0 91 29 01 	lds	r27, 0x0129
    1a94:	0e 94 a5 19 	call	0x334a	; 0x334a <LCD_intgerToString>
	key = 0;
	uint32 amount = 0;
	LCD_clearScreen();
	LCD_displayString("Enter Amount:");
	LCD_moveCursor(1, 0);
	while (key != '=') {
    1a98:	80 91 26 01 	lds	r24, 0x0126
    1a9c:	90 91 27 01 	lds	r25, 0x0127
    1aa0:	a0 91 28 01 	lds	r26, 0x0128
    1aa4:	b0 91 29 01 	lds	r27, 0x0129
    1aa8:	8d 33       	cpi	r24, 0x3D	; 61
    1aaa:	91 05       	cpc	r25, r1
    1aac:	a1 05       	cpc	r26, r1
    1aae:	b1 05       	cpc	r27, r1
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <WithdrawOption+0x1c6>
    1ab2:	42 cf       	rjmp	.-380    	; 0x1938 <WithdrawOption+0x4a>
		amount *= 10;
		amount += key;
		key = KEYPAD_getPressedKey();
		LCD_intgerToString(key);
	}
	key = 0;
    1ab4:	10 92 26 01 	sts	0x0126, r1
    1ab8:	10 92 27 01 	sts	0x0127, r1
    1abc:	10 92 28 01 	sts	0x0128, r1
    1ac0:	10 92 29 01 	sts	0x0129, r1
	DcMotor_Rotate(CLOCKWISE, 75);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	6b e4       	ldi	r22, 0x4B	; 75
    1ac8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DcMotor_Rotate>
	LCD_displayString("Please Wait ...");
    1acc:	89 ee       	ldi	r24, 0xE9	; 233
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	aa ef       	ldi	r26, 0xFA	; 250
    1ada:	b4 e4       	ldi	r27, 0x44	; 68
    1adc:	89 8f       	std	Y+25, r24	; 0x19
    1ade:	9a 8f       	std	Y+26, r25	; 0x1a
    1ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a ef       	ldi	r20, 0xFA	; 250
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8d 8b       	std	Y+21, r24	; 0x15
    1afe:	9e 8b       	std	Y+22, r25	; 0x16
    1b00:	af 8b       	std	Y+23, r26	; 0x17
    1b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <WithdrawOption+0x238>
		__ticks = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
    1b24:	3f c0       	rjmp	.+126    	; 0x1ba4 <WithdrawOption+0x2b6>
	else if (__tmp > 65535)
    1b26:	6d 89       	ldd	r22, Y+21	; 0x15
    1b28:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
    1b32:	4f e7       	ldi	r20, 0x7F	; 127
    1b34:	57 e4       	ldi	r21, 0x47	; 71
    1b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3a:	18 16       	cp	r1, r24
    1b3c:	4c f5       	brge	.+82     	; 0x1b90 <WithdrawOption+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <WithdrawOption+0x298>
    1b68:	88 ec       	ldi	r24, 0xC8	; 200
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9a 8b       	std	Y+18, r25	; 0x12
    1b6e:	89 8b       	std	Y+17, r24	; 0x11
    1b70:	89 89       	ldd	r24, Y+17	; 0x11
    1b72:	9a 89       	ldd	r25, Y+18	; 0x12
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <WithdrawOption+0x286>
    1b78:	9a 8b       	std	Y+18, r25	; 0x12
    1b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	9c 8b       	std	Y+20, r25	; 0x14
    1b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	69 f7       	brne	.-38     	; 0x1b68 <WithdrawOption+0x27a>
    1b8e:	14 c0       	rjmp	.+40     	; 0x1bb8 <WithdrawOption+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b90:	6d 89       	ldd	r22, Y+21	; 0x15
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9c 8b       	std	Y+20, r25	; 0x14
    1ba2:	8b 8b       	std	Y+19, r24	; 0x13
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	98 8b       	std	Y+16, r25	; 0x10
    1baa:	8f 87       	std	Y+15, r24	; 0x0f
    1bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bae:	98 89       	ldd	r25, Y+16	; 0x10
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <WithdrawOption+0x2c2>
    1bb4:	98 8b       	std	Y+16, r25	; 0x10
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	LCD_clearScreen();
    1bb8:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	LCD_displayString("New Balance is:");
    1bbc:	89 ef       	ldi	r24, 0xF9	; 249
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
	UserData.balance -= amount;
    1bc4:	20 91 33 01 	lds	r18, 0x0133
    1bc8:	30 91 34 01 	lds	r19, 0x0134
    1bcc:	40 91 35 01 	lds	r20, 0x0135
    1bd0:	50 91 36 01 	lds	r21, 0x0136
    1bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd8:	ad a5       	ldd	r26, Y+45	; 0x2d
    1bda:	be a5       	ldd	r27, Y+46	; 0x2e
    1bdc:	79 01       	movw	r14, r18
    1bde:	8a 01       	movw	r16, r20
    1be0:	e8 1a       	sub	r14, r24
    1be2:	f9 0a       	sbc	r15, r25
    1be4:	0a 0b       	sbc	r16, r26
    1be6:	1b 0b       	sbc	r17, r27
    1be8:	d8 01       	movw	r26, r16
    1bea:	c7 01       	movw	r24, r14
    1bec:	80 93 33 01 	sts	0x0133, r24
    1bf0:	90 93 34 01 	sts	0x0134, r25
    1bf4:	a0 93 35 01 	sts	0x0135, r26
    1bf8:	b0 93 36 01 	sts	0x0136, r27
	LCD_moveCursor(1, 0);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
	LCD_intgerToString(UserData.balance);
    1c04:	80 91 33 01 	lds	r24, 0x0133
    1c08:	90 91 34 01 	lds	r25, 0x0134
    1c0c:	a0 91 35 01 	lds	r26, 0x0135
    1c10:	b0 91 36 01 	lds	r27, 0x0136
    1c14:	0e 94 a5 19 	call	0x334a	; 0x334a <LCD_intgerToString>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	aa ef       	ldi	r26, 0xFA	; 250
    1c1e:	b4 e4       	ldi	r27, 0x44	; 68
    1c20:	8b 87       	std	Y+11, r24	; 0x0b
    1c22:	9c 87       	std	Y+12, r25	; 0x0c
    1c24:	ad 87       	std	Y+13, r26	; 0x0d
    1c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8f 83       	std	Y+7, r24	; 0x07
    1c42:	98 87       	std	Y+8, r25	; 0x08
    1c44:	a9 87       	std	Y+9, r26	; 0x09
    1c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <WithdrawOption+0x37c>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <WithdrawOption+0x3fa>
	else if (__tmp > 65535)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <WithdrawOption+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <WithdrawOption+0x3dc>
    1cac:	88 ec       	ldi	r24, 0xC8	; 200
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <WithdrawOption+0x3ca>
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <WithdrawOption+0x3be>
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <WithdrawOption+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <WithdrawOption+0x406>
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	FeaturesIndex = User_Data_INDEX;
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	80 93 2a 01 	sts	0x012A, r24
}
    1d02:	ae 96       	adiw	r28, 0x2e	; 46
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	08 95       	ret

00001d1c <main>:
int main() {
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1d24:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_init>
	TWI_init();
    1d28:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <TWI_init>
	SPI_initSlave();
    1d2c:	0e 94 39 1a 	call	0x3472	; 0x3472 <SPI_initSlave>
	LCD_init();
    1d30:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_init>
	DcMotor_Init();
    1d34:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DcMotor_Init>
	IBAN_Recieve();
    1d38:	0e 94 a3 05 	call	0xb46	; 0xb46 <IBAN_Recieve>
	LCD_clearScreen();
    1d3c:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_clearScreen>
	while (1) {
		/*array of functions holding the system functions*/
		(*SystemFeatures[FeaturesIndex])();
    1d40:	80 91 2a 01 	lds	r24, 0x012A
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	ea 5e       	subi	r30, 0xEA	; 234
    1d50:	fe 4f       	sbci	r31, 0xFE	; 254
    1d52:	01 90       	ld	r0, Z+
    1d54:	f0 81       	ld	r31, Z
    1d56:	e0 2d       	mov	r30, r0
    1d58:	09 95       	icall
    1d5a:	f2 cf       	rjmp	.-28     	; 0x1d40 <main+0x24>

00001d5c <Buzzer_init>:
#include "common_macros.h"
/*
 * Description :Setup the direction for the buzzer pin as output pin through the GPIO driver
 Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void) {
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PINID, PIN_OUTPUT);
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	67 e0       	ldi	r22, 0x07	; 7
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PINID, LOGIC_LOW);
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	67 e0       	ldi	r22, 0x07	; 7
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
}
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <Buzzer_ON>:
/*
 * Description :Function to enable the Buzzer through the GPIO.
 */
void Buzzer_ON(void) {
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PINID, LOGIC_HIGH);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>

}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <Buzzer_OFF>:
/*
 * Description :Function to disable the Buzzer through the GPIO.
 */
void Buzzer_OFF(void) {
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PINID, LOGIC_LOW);
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	67 e0       	ldi	r22, 0x07	; 7
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <DcMotor_Init>:
/*
 * Description :
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void) {
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, PIN_OUTPUT);
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	64 e0       	ldi	r22, 0x04	; 4
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, PIN_OUTPUT);
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	65 e0       	ldi	r22, 0x05	; 5
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_LOW);
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	64 e0       	ldi	r22, 0x04	; 4
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_LOW);
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	65 e0       	ldi	r22, 0x05	; 5
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <DcMotor_Rotate>:
/*
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor
 * based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <DcMotor_Rotate+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <DcMotor_Rotate+0x8>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <PWM_Timer0_Start>
	switch (state) {
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	3c 83       	std	Y+4, r19	; 0x04
    1e02:	2b 83       	std	Y+3, r18	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	a1 f0       	breq	.+40     	; 0x1e36 <DcMotor_Rotate+0x52>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	d1 f0       	breq	.+52     	; 0x1e4c <DcMotor_Rotate+0x68>
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	01 f5       	brne	.+64     	; 0x1e60 <DcMotor_Rotate+0x7c>
	case STOP: {
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_LOW);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	64 e0       	ldi	r22, 0x04	; 4
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>

		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_LOW);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    1e34:	15 c0       	rjmp	.+42     	; 0x1e60 <DcMotor_Rotate+0x7c>
		break;
	}
	case CLOCKWISE: {
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_HIGH);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	64 e0       	ldi	r22, 0x04	; 4
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>

		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_LOW);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	65 e0       	ldi	r22, 0x05	; 5
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <DcMotor_Rotate+0x7c>
		break;
	}
	case A_CLOCKWISE: {
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_LOW);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>

		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_HIGH);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	65 e0       	ldi	r22, 0x05	; 5
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
		break;
	}
	}
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <EEPROM_writeByte+0x6>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <EEPROM_writeByte+0x8>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e80:	0e 94 0f 1c 	call	0x381e	; 0x381e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1e84:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	11 f0       	breq	.+4      	; 0x1e90 <EEPROM_writeByte+0x22>
        return ERROR;
    1e8c:	1c 82       	std	Y+4, r1	; 0x04
    1e8e:	28 c0       	rjmp	.+80     	; 0x1ee0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	80 70       	andi	r24, 0x00	; 0
    1e96:	97 70       	andi	r25, 0x07	; 7
    1e98:	88 0f       	add	r24, r24
    1e9a:	89 2f       	mov	r24, r25
    1e9c:	88 1f       	adc	r24, r24
    1e9e:	99 0b       	sbc	r25, r25
    1ea0:	91 95       	neg	r25
    1ea2:	80 6a       	ori	r24, 0xA0	; 160
    1ea4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ea8:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1eac:	88 31       	cpi	r24, 0x18	; 24
    1eae:	11 f0       	breq	.+4      	; 0x1eb4 <EEPROM_writeByte+0x46>
        return ERROR; 
    1eb0:	1c 82       	std	Y+4, r1	; 0x04
    1eb2:	16 c0       	rjmp	.+44     	; 0x1ee0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1eba:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1ebe:	88 32       	cpi	r24, 0x28	; 40
    1ec0:	11 f0       	breq	.+4      	; 0x1ec6 <EEPROM_writeByte+0x58>
        return ERROR;
    1ec2:	1c 82       	std	Y+4, r1	; 0x04
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ecc:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1ed0:	88 32       	cpi	r24, 0x28	; 40
    1ed2:	11 f0       	breq	.+4      	; 0x1ed8 <EEPROM_writeByte+0x6a>
        return ERROR;
    1ed4:	1c 82       	std	Y+4, r1	; 0x04
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ed8:	0e 94 1f 1c 	call	0x383e	; 0x383e <TWI_stop>
	
    return SUCCESS;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	8c 83       	std	Y+4, r24	; 0x04
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <EEPROM_readByte+0x6>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <EEPROM_readByte+0x8>
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	7c 83       	std	Y+4, r23	; 0x04
    1f04:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1f06:	0e 94 0f 1c 	call	0x381e	; 0x381e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1f0a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1f0e:	88 30       	cpi	r24, 0x08	; 8
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <EEPROM_readByte+0x26>
        return ERROR;
    1f12:	1d 82       	std	Y+5, r1	; 0x05
    1f14:	44 c0       	rjmp	.+136    	; 0x1f9e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	80 70       	andi	r24, 0x00	; 0
    1f1c:	97 70       	andi	r25, 0x07	; 7
    1f1e:	88 0f       	add	r24, r24
    1f20:	89 2f       	mov	r24, r25
    1f22:	88 1f       	adc	r24, r24
    1f24:	99 0b       	sbc	r25, r25
    1f26:	91 95       	neg	r25
    1f28:	80 6a       	ori	r24, 0xA0	; 160
    1f2a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1f2e:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1f32:	88 31       	cpi	r24, 0x18	; 24
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <EEPROM_readByte+0x4a>
        return ERROR;
    1f36:	1d 82       	std	Y+5, r1	; 0x05
    1f38:	32 c0       	rjmp	.+100    	; 0x1f9e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f40:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1f44:	88 32       	cpi	r24, 0x28	; 40
    1f46:	11 f0       	breq	.+4      	; 0x1f4c <EEPROM_readByte+0x5c>
        return ERROR;
    1f48:	1d 82       	std	Y+5, r1	; 0x05
    1f4a:	29 c0       	rjmp	.+82     	; 0x1f9e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1f4c:	0e 94 0f 1c 	call	0x381e	; 0x381e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1f50:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1f54:	80 31       	cpi	r24, 0x10	; 16
    1f56:	11 f0       	breq	.+4      	; 0x1f5c <EEPROM_readByte+0x6c>
        return ERROR;
    1f58:	1d 82       	std	Y+5, r1	; 0x05
    1f5a:	21 c0       	rjmp	.+66     	; 0x1f9e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	80 70       	andi	r24, 0x00	; 0
    1f62:	97 70       	andi	r25, 0x07	; 7
    1f64:	88 0f       	add	r24, r24
    1f66:	89 2f       	mov	r24, r25
    1f68:	88 1f       	adc	r24, r24
    1f6a:	99 0b       	sbc	r25, r25
    1f6c:	91 95       	neg	r25
    1f6e:	81 6a       	ori	r24, 0xA1	; 161
    1f70:	0e 94 2a 1c 	call	0x3854	; 0x3854 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1f74:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1f78:	80 34       	cpi	r24, 0x40	; 64
    1f7a:	11 f0       	breq	.+4      	; 0x1f80 <EEPROM_readByte+0x90>
        return ERROR;
    1f7c:	1d 82       	std	Y+5, r1	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1f80:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <TWI_readByteWithNACK>
    1f84:	eb 81       	ldd	r30, Y+3	; 0x03
    1f86:	fc 81       	ldd	r31, Y+4	; 0x04
    1f88:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1f8a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TWI_getStatus>
    1f8e:	88 35       	cpi	r24, 0x58	; 88
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <EEPROM_readByte+0xa6>
        return ERROR;
    1f92:	1d 82       	std	Y+5, r1	; 0x05
    1f94:	04 c0       	rjmp	.+8      	; 0x1f9e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1f96:	0e 94 1f 1c 	call	0x383e	; 0x383e <TWI_stop>

    return SUCCESS;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <GPIO_setupPinDirection+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <GPIO_setupPinDirection+0x8>
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	6a 83       	std	Y+2, r22	; 0x02
    1fc2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	88 30       	cpi	r24, 0x08	; 8
    1fc8:	08 f0       	brcs	.+2      	; 0x1fcc <GPIO_setupPinDirection+0x1c>
    1fca:	d5 c0       	rjmp	.+426    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	84 30       	cpi	r24, 0x04	; 4
    1fd0:	08 f0       	brcs	.+2      	; 0x1fd4 <GPIO_setupPinDirection+0x24>
    1fd2:	d1 c0       	rjmp	.+418    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	3d 83       	std	Y+5, r19	; 0x05
    1fdc:	2c 83       	std	Y+4, r18	; 0x04
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <GPIO_setupPinDirection+0x3a>
    1fe8:	43 c0       	rjmp	.+134    	; 0x2070 <GPIO_setupPinDirection+0xc0>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <GPIO_setupPinDirection+0x4e>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	71 f0       	breq	.+28     	; 0x2018 <GPIO_setupPinDirection+0x68>
    1ffc:	bc c0       	rjmp	.+376    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
    1ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    2000:	3d 81       	ldd	r19, Y+5	; 0x05
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <GPIO_setupPinDirection+0x5a>
    2008:	5f c0       	rjmp	.+190    	; 0x20c8 <GPIO_setupPinDirection+0x118>
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	91 05       	cpc	r25, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <GPIO_setupPinDirection+0x66>
    2014:	85 c0       	rjmp	.+266    	; 0x2120 <GPIO_setupPinDirection+0x170>
    2016:	af c0       	rjmp	.+350    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	a1 f4       	brne	.+40     	; 0x2046 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    201e:	aa e3       	ldi	r26, 0x3A	; 58
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ea e3       	ldi	r30, 0x3A	; 58
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <GPIO_setupPinDirection+0x8c>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <GPIO_setupPinDirection+0x88>
    2040:	84 2b       	or	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	98 c0       	rjmp	.+304    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2046:	aa e3       	ldi	r26, 0x3A	; 58
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	ea e3       	ldi	r30, 0x3A	; 58
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	48 2f       	mov	r20, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 2e       	mov	r0, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <GPIO_setupPinDirection+0xb4>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <GPIO_setupPinDirection+0xb0>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	83 c0       	rjmp	.+262    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	a1 f4       	brne	.+40     	; 0x209e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2076:	a7 e3       	ldi	r26, 0x37	; 55
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e7 e3       	ldi	r30, 0x37	; 55
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <GPIO_setupPinDirection+0xe4>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <GPIO_setupPinDirection+0xe0>
    2098:	84 2b       	or	r24, r20
    209a:	8c 93       	st	X, r24
    209c:	6c c0       	rjmp	.+216    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    209e:	a7 e3       	ldi	r26, 0x37	; 55
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e7 e3       	ldi	r30, 0x37	; 55
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	48 2f       	mov	r20, r24
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	02 2e       	mov	r0, r18
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <GPIO_setupPinDirection+0x10c>
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	0a 94       	dec	r0
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <GPIO_setupPinDirection+0x108>
    20c0:	80 95       	com	r24
    20c2:	84 23       	and	r24, r20
    20c4:	8c 93       	st	X, r24
    20c6:	57 c0       	rjmp	.+174    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	a1 f4       	brne	.+40     	; 0x20f6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    20ce:	a4 e3       	ldi	r26, 0x34	; 52
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e4 e3       	ldi	r30, 0x34	; 52
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <GPIO_setupPinDirection+0x13c>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <GPIO_setupPinDirection+0x138>
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	40 c0       	rjmp	.+128    	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    20f6:	a4 e3       	ldi	r26, 0x34	; 52
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e4 e3       	ldi	r30, 0x34	; 52
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	48 2f       	mov	r20, r24
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	02 2e       	mov	r0, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <GPIO_setupPinDirection+0x164>
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	0a 94       	dec	r0
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <GPIO_setupPinDirection+0x160>
    2118:	80 95       	com	r24
    211a:	84 23       	and	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	2b c0       	rjmp	.+86     	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	a1 f4       	brne	.+40     	; 0x214e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2126:	a1 e3       	ldi	r26, 0x31	; 49
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e1 e3       	ldi	r30, 0x31	; 49
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <GPIO_setupPinDirection+0x194>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <GPIO_setupPinDirection+0x190>
    2148:	84 2b       	or	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    214e:	a1 e3       	ldi	r26, 0x31	; 49
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e1 e3       	ldi	r30, 0x31	; 49
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	48 2f       	mov	r20, r24
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	02 2e       	mov	r0, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <GPIO_setupPinDirection+0x1bc>
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	0a 94       	dec	r0
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <GPIO_setupPinDirection+0x1b8>
    2170:	80 95       	com	r24
    2172:	84 23       	and	r24, r20
    2174:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <GPIO_writePin+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <GPIO_writePin+0x8>
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	6a 83       	std	Y+2, r22	; 0x02
    2198:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	88 30       	cpi	r24, 0x08	; 8
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <GPIO_writePin+0x1c>
    21a0:	d5 c0       	rjmp	.+426    	; 0x234c <GPIO_writePin+0x1c6>
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	84 30       	cpi	r24, 0x04	; 4
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <GPIO_writePin+0x24>
    21a8:	d1 c0       	rjmp	.+418    	; 0x234c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	3d 83       	std	Y+5, r19	; 0x05
    21b2:	2c 83       	std	Y+4, r18	; 0x04
    21b4:	8c 81       	ldd	r24, Y+4	; 0x04
    21b6:	9d 81       	ldd	r25, Y+5	; 0x05
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	91 05       	cpc	r25, r1
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <GPIO_writePin+0x3a>
    21be:	43 c0       	rjmp	.+134    	; 0x2246 <GPIO_writePin+0xc0>
    21c0:	2c 81       	ldd	r18, Y+4	; 0x04
    21c2:	3d 81       	ldd	r19, Y+5	; 0x05
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <GPIO_writePin+0x4e>
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	71 f0       	breq	.+28     	; 0x21ee <GPIO_writePin+0x68>
    21d2:	bc c0       	rjmp	.+376    	; 0x234c <GPIO_writePin+0x1c6>
    21d4:	2c 81       	ldd	r18, Y+4	; 0x04
    21d6:	3d 81       	ldd	r19, Y+5	; 0x05
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <GPIO_writePin+0x5a>
    21de:	5f c0       	rjmp	.+190    	; 0x229e <GPIO_writePin+0x118>
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	83 30       	cpi	r24, 0x03	; 3
    21e6:	91 05       	cpc	r25, r1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <GPIO_writePin+0x66>
    21ea:	85 c0       	rjmp	.+266    	; 0x22f6 <GPIO_writePin+0x170>
    21ec:	af c0       	rjmp	.+350    	; 0x234c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	a1 f4       	brne	.+40     	; 0x221c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    21f4:	ab e3       	ldi	r26, 0x3B	; 59
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	eb e3       	ldi	r30, 0x3B	; 59
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	48 2f       	mov	r20, r24
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 2e       	mov	r0, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <GPIO_writePin+0x8c>
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	0a 94       	dec	r0
    2214:	e2 f7       	brpl	.-8      	; 0x220e <GPIO_writePin+0x88>
    2216:	84 2b       	or	r24, r20
    2218:	8c 93       	st	X, r24
    221a:	98 c0       	rjmp	.+304    	; 0x234c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    221c:	ab e3       	ldi	r26, 0x3B	; 59
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	eb e3       	ldi	r30, 0x3B	; 59
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <GPIO_writePin+0xb4>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <GPIO_writePin+0xb0>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	83 c0       	rjmp	.+262    	; 0x234c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	a1 f4       	brne	.+40     	; 0x2274 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    224c:	a8 e3       	ldi	r26, 0x38	; 56
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e8 e3       	ldi	r30, 0x38	; 56
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <GPIO_writePin+0xe4>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <GPIO_writePin+0xe0>
    226e:	84 2b       	or	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	6c c0       	rjmp	.+216    	; 0x234c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2274:	a8 e3       	ldi	r26, 0x38	; 56
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e8 e3       	ldi	r30, 0x38	; 56
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 2e       	mov	r0, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <GPIO_writePin+0x10c>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <GPIO_writePin+0x108>
    2296:	80 95       	com	r24
    2298:	84 23       	and	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	57 c0       	rjmp	.+174    	; 0x234c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	a1 f4       	brne	.+40     	; 0x22cc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    22a4:	a5 e3       	ldi	r26, 0x35	; 53
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e5 e3       	ldi	r30, 0x35	; 53
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	48 2f       	mov	r20, r24
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <GPIO_writePin+0x13c>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <GPIO_writePin+0x138>
    22c6:	84 2b       	or	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	40 c0       	rjmp	.+128    	; 0x234c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    22cc:	a5 e3       	ldi	r26, 0x35	; 53
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e5 e3       	ldi	r30, 0x35	; 53
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <GPIO_writePin+0x164>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <GPIO_writePin+0x160>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	8c 93       	st	X, r24
    22f4:	2b c0       	rjmp	.+86     	; 0x234c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	a1 f4       	brne	.+40     	; 0x2324 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    22fc:	a2 e3       	ldi	r26, 0x32	; 50
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e2 e3       	ldi	r30, 0x32	; 50
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <GPIO_writePin+0x194>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <GPIO_writePin+0x190>
    231e:	84 2b       	or	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	14 c0       	rjmp	.+40     	; 0x234c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2324:	a2 e3       	ldi	r26, 0x32	; 50
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e2 e3       	ldi	r30, 0x32	; 50
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 2e       	mov	r0, r18
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <GPIO_writePin+0x1bc>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	0a 94       	dec	r0
    2344:	e2 f7       	brpl	.-8      	; 0x233e <GPIO_writePin+0x1b8>
    2346:	80 95       	com	r24
    2348:	84 23       	and	r24, r20
    234a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <GPIO_readPin+0x6>
    2362:	00 d0       	rcall	.+0      	; 0x2364 <GPIO_readPin+0x8>
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    236e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	88 30       	cpi	r24, 0x08	; 8
    2374:	08 f0       	brcs	.+2      	; 0x2378 <GPIO_readPin+0x1c>
    2376:	84 c0       	rjmp	.+264    	; 0x2480 <GPIO_readPin+0x124>
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	84 30       	cpi	r24, 0x04	; 4
    237c:	08 f0       	brcs	.+2      	; 0x2380 <GPIO_readPin+0x24>
    237e:	80 c0       	rjmp	.+256    	; 0x2480 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	3d 83       	std	Y+5, r19	; 0x05
    2388:	2c 83       	std	Y+4, r18	; 0x04
    238a:	4c 81       	ldd	r20, Y+4	; 0x04
    238c:	5d 81       	ldd	r21, Y+5	; 0x05
    238e:	41 30       	cpi	r20, 0x01	; 1
    2390:	51 05       	cpc	r21, r1
    2392:	79 f1       	breq	.+94     	; 0x23f2 <GPIO_readPin+0x96>
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	9d 81       	ldd	r25, Y+5	; 0x05
    2398:	82 30       	cpi	r24, 0x02	; 2
    239a:	91 05       	cpc	r25, r1
    239c:	34 f4       	brge	.+12     	; 0x23aa <GPIO_readPin+0x4e>
    239e:	2c 81       	ldd	r18, Y+4	; 0x04
    23a0:	3d 81       	ldd	r19, Y+5	; 0x05
    23a2:	21 15       	cp	r18, r1
    23a4:	31 05       	cpc	r19, r1
    23a6:	69 f0       	breq	.+26     	; 0x23c2 <GPIO_readPin+0x66>
    23a8:	6b c0       	rjmp	.+214    	; 0x2480 <GPIO_readPin+0x124>
    23aa:	4c 81       	ldd	r20, Y+4	; 0x04
    23ac:	5d 81       	ldd	r21, Y+5	; 0x05
    23ae:	42 30       	cpi	r20, 0x02	; 2
    23b0:	51 05       	cpc	r21, r1
    23b2:	b9 f1       	breq	.+110    	; 0x2422 <GPIO_readPin+0xc6>
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	9d 81       	ldd	r25, Y+5	; 0x05
    23b8:	83 30       	cpi	r24, 0x03	; 3
    23ba:	91 05       	cpc	r25, r1
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <GPIO_readPin+0x64>
    23be:	49 c0       	rjmp	.+146    	; 0x2452 <GPIO_readPin+0xf6>
    23c0:	5f c0       	rjmp	.+190    	; 0x2480 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    23c2:	e9 e3       	ldi	r30, 0x39	; 57
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <GPIO_readPin+0x7e>
    23d6:	55 95       	asr	r21
    23d8:	47 95       	ror	r20
    23da:	8a 95       	dec	r24
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <GPIO_readPin+0x7a>
    23de:	ca 01       	movw	r24, r20
    23e0:	81 70       	andi	r24, 0x01	; 1
    23e2:	90 70       	andi	r25, 0x00	; 0
    23e4:	88 23       	and	r24, r24
    23e6:	19 f0       	breq	.+6      	; 0x23ee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	49 c0       	rjmp	.+146    	; 0x2480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23ee:	19 82       	std	Y+1, r1	; 0x01
    23f0:	47 c0       	rjmp	.+142    	; 0x2480 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    23f2:	e6 e3       	ldi	r30, 0x36	; 54
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a9 01       	movw	r20, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <GPIO_readPin+0xae>
    2406:	55 95       	asr	r21
    2408:	47 95       	ror	r20
    240a:	8a 95       	dec	r24
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <GPIO_readPin+0xaa>
    240e:	ca 01       	movw	r24, r20
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	88 23       	and	r24, r24
    2416:	19 f0       	breq	.+6      	; 0x241e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	31 c0       	rjmp	.+98     	; 0x2480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    241e:	19 82       	std	Y+1, r1	; 0x01
    2420:	2f c0       	rjmp	.+94     	; 0x2480 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2422:	e3 e3       	ldi	r30, 0x33	; 51
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a9 01       	movw	r20, r18
    2434:	02 c0       	rjmp	.+4      	; 0x243a <GPIO_readPin+0xde>
    2436:	55 95       	asr	r21
    2438:	47 95       	ror	r20
    243a:	8a 95       	dec	r24
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <GPIO_readPin+0xda>
    243e:	ca 01       	movw	r24, r20
    2440:	81 70       	andi	r24, 0x01	; 1
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	88 23       	and	r24, r24
    2446:	19 f0       	breq	.+6      	; 0x244e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	19 c0       	rjmp	.+50     	; 0x2480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    244e:	19 82       	std	Y+1, r1	; 0x01
    2450:	17 c0       	rjmp	.+46     	; 0x2480 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2452:	e0 e3       	ldi	r30, 0x30	; 48
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a9 01       	movw	r20, r18
    2464:	02 c0       	rjmp	.+4      	; 0x246a <GPIO_readPin+0x10e>
    2466:	55 95       	asr	r21
    2468:	47 95       	ror	r20
    246a:	8a 95       	dec	r24
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <GPIO_readPin+0x10a>
    246e:	ca 01       	movw	r24, r20
    2470:	81 70       	andi	r24, 0x01	; 1
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	88 23       	and	r24, r24
    2476:	19 f0       	breq	.+6      	; 0x247e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	01 c0       	rjmp	.+2      	; 0x2480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    247e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2480:	89 81       	ldd	r24, Y+1	; 0x01
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	00 d0       	rcall	.+0      	; 0x2498 <GPIO_setupPortDirection+0x6>
    2498:	00 d0       	rcall	.+0      	; 0x249a <GPIO_setupPortDirection+0x8>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	84 30       	cpi	r24, 0x04	; 4
    24a6:	90 f5       	brcc	.+100    	; 0x250c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	3c 83       	std	Y+4, r19	; 0x04
    24b0:	2b 83       	std	Y+3, r18	; 0x03
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	91 05       	cpc	r25, r1
    24ba:	d1 f0       	breq	.+52     	; 0x24f0 <GPIO_setupPortDirection+0x5e>
    24bc:	2b 81       	ldd	r18, Y+3	; 0x03
    24be:	3c 81       	ldd	r19, Y+4	; 0x04
    24c0:	22 30       	cpi	r18, 0x02	; 2
    24c2:	31 05       	cpc	r19, r1
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <GPIO_setupPortDirection+0x3e>
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	61 f0       	breq	.+24     	; 0x24e6 <GPIO_setupPortDirection+0x54>
    24ce:	1e c0       	rjmp	.+60     	; 0x250c <GPIO_setupPortDirection+0x7a>
    24d0:	2b 81       	ldd	r18, Y+3	; 0x03
    24d2:	3c 81       	ldd	r19, Y+4	; 0x04
    24d4:	22 30       	cpi	r18, 0x02	; 2
    24d6:	31 05       	cpc	r19, r1
    24d8:	81 f0       	breq	.+32     	; 0x24fa <GPIO_setupPortDirection+0x68>
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	83 30       	cpi	r24, 0x03	; 3
    24e0:	91 05       	cpc	r25, r1
    24e2:	81 f0       	breq	.+32     	; 0x2504 <GPIO_setupPortDirection+0x72>
    24e4:	13 c0       	rjmp	.+38     	; 0x250c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    24e6:	ea e3       	ldi	r30, 0x3A	; 58
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	80 83       	st	Z, r24
    24ee:	0e c0       	rjmp	.+28     	; 0x250c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    24f0:	e7 e3       	ldi	r30, 0x37	; 55
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	80 83       	st	Z, r24
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    24fa:	e4 e3       	ldi	r30, 0x34	; 52
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	80 83       	st	Z, r24
    2502:	04 c0       	rjmp	.+8      	; 0x250c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2504:	e1 e3       	ldi	r30, 0x31	; 49
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	80 83       	st	Z, r24
			break;
		}
	}
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <GPIO_writePort+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <GPIO_writePort+0x8>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	84 30       	cpi	r24, 0x04	; 4
    252e:	90 f5       	brcc	.+100    	; 0x2594 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	3c 83       	std	Y+4, r19	; 0x04
    2538:	2b 83       	std	Y+3, r18	; 0x03
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	91 05       	cpc	r25, r1
    2542:	d1 f0       	breq	.+52     	; 0x2578 <GPIO_writePort+0x5e>
    2544:	2b 81       	ldd	r18, Y+3	; 0x03
    2546:	3c 81       	ldd	r19, Y+4	; 0x04
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	2c f4       	brge	.+10     	; 0x2558 <GPIO_writePort+0x3e>
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	61 f0       	breq	.+24     	; 0x256e <GPIO_writePort+0x54>
    2556:	1e c0       	rjmp	.+60     	; 0x2594 <GPIO_writePort+0x7a>
    2558:	2b 81       	ldd	r18, Y+3	; 0x03
    255a:	3c 81       	ldd	r19, Y+4	; 0x04
    255c:	22 30       	cpi	r18, 0x02	; 2
    255e:	31 05       	cpc	r19, r1
    2560:	81 f0       	breq	.+32     	; 0x2582 <GPIO_writePort+0x68>
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	91 05       	cpc	r25, r1
    256a:	81 f0       	breq	.+32     	; 0x258c <GPIO_writePort+0x72>
    256c:	13 c0       	rjmp	.+38     	; 0x2594 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    256e:	eb e3       	ldi	r30, 0x3B	; 59
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	80 83       	st	Z, r24
    2576:	0e c0       	rjmp	.+28     	; 0x2594 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2578:	e8 e3       	ldi	r30, 0x38	; 56
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	80 83       	st	Z, r24
    2580:	09 c0       	rjmp	.+18     	; 0x2594 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2582:	e5 e3       	ldi	r30, 0x35	; 53
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	80 83       	st	Z, r24
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    258c:	e2 e3       	ldi	r30, 0x32	; 50
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	80 83       	st	Z, r24
			break;
		}
	}
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <GPIO_readPort+0x6>
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <GPIO_readPort+0x8>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    25b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	84 30       	cpi	r24, 0x04	; 4
    25b6:	90 f5       	brcc	.+100    	; 0x261c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3c 83       	std	Y+4, r19	; 0x04
    25c0:	2b 83       	std	Y+3, r18	; 0x03
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	91 05       	cpc	r25, r1
    25ca:	d1 f0       	breq	.+52     	; 0x2600 <GPIO_readPort+0x5e>
    25cc:	2b 81       	ldd	r18, Y+3	; 0x03
    25ce:	3c 81       	ldd	r19, Y+4	; 0x04
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	2c f4       	brge	.+10     	; 0x25e0 <GPIO_readPort+0x3e>
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	61 f0       	breq	.+24     	; 0x25f6 <GPIO_readPort+0x54>
    25de:	1e c0       	rjmp	.+60     	; 0x261c <GPIO_readPort+0x7a>
    25e0:	2b 81       	ldd	r18, Y+3	; 0x03
    25e2:	3c 81       	ldd	r19, Y+4	; 0x04
    25e4:	22 30       	cpi	r18, 0x02	; 2
    25e6:	31 05       	cpc	r19, r1
    25e8:	81 f0       	breq	.+32     	; 0x260a <GPIO_readPort+0x68>
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	83 30       	cpi	r24, 0x03	; 3
    25f0:	91 05       	cpc	r25, r1
    25f2:	81 f0       	breq	.+32     	; 0x2614 <GPIO_readPort+0x72>
    25f4:	13 c0       	rjmp	.+38     	; 0x261c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    25f6:	e9 e3       	ldi	r30, 0x39	; 57
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	0e c0       	rjmp	.+28     	; 0x261c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2600:	e6 e3       	ldi	r30, 0x36	; 54
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	09 c0       	rjmp	.+18     	; 0x261c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    260a:	e3 e3       	ldi	r30, 0x33	; 51
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	04 c0       	rjmp	.+8      	; 0x261c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2614:	e0 e3       	ldi	r30, 0x30	; 48
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	60 97       	sbiw	r28, 0x10	; 16
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	64 e0       	ldi	r22, 0x04	; 4
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	65 e0       	ldi	r22, 0x05	; 5
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	66 e0       	ldi	r22, 0x06	; 6
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	67 e0       	ldi	r22, 0x07	; 7
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	63 e0       	ldi	r22, 0x03	; 3
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2690:	1f 86       	std	Y+15, r1	; 0x0f
    2692:	b1 c0       	rjmp	.+354    	; 0x27f6 <KEYPAD_getPressedKey+0x1ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2694:	8f 85       	ldd	r24, Y+15	; 0x0f
    2696:	98 2f       	mov	r25, r24
    2698:	9c 5f       	subi	r25, 0xFC	; 252
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	69 2f       	mov	r22, r25
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    26a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a6:	98 2f       	mov	r25, r24
    26a8:	9c 5f       	subi	r25, 0xFC	; 252
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	69 2f       	mov	r22, r25
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    26b4:	18 8a       	std	Y+16, r1	; 0x10
    26b6:	1f c0       	rjmp	.+62     	; 0x26f6 <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	68 89       	ldd	r22, Y+16	; 0x10
    26bc:	0e 94 ae 11 	call	0x235c	; 0x235c <GPIO_readPin>
    26c0:	88 23       	and	r24, r24
    26c2:	b1 f4       	brne	.+44     	; 0x26f0 <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    26c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	98 2f       	mov	r25, r24
    26d4:	88 89       	ldd	r24, Y+16	; 0x10
    26d6:	89 0f       	add	r24, r25
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	0e 94 00 14 	call	0x2800	; 0x2800 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    26de:	60 96       	adiw	r28, 0x10	; 16
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    26f0:	88 89       	ldd	r24, Y+16	; 0x10
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	88 8b       	std	Y+16, r24	; 0x10
    26f6:	88 89       	ldd	r24, Y+16	; 0x10
    26f8:	84 30       	cpi	r24, 0x04	; 4
    26fa:	f0 f2       	brcs	.-68     	; 0x26b8 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    26fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fe:	98 2f       	mov	r25, r24
    2700:	9c 5f       	subi	r25, 0xFC	; 252
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	69 2f       	mov	r22, r25
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a0 ea       	ldi	r26, 0xA0	; 160
    2712:	b0 e4       	ldi	r27, 0x40	; 64
    2714:	8b 87       	std	Y+11, r24	; 0x0b
    2716:	9c 87       	std	Y+12, r25	; 0x0c
    2718:	ad 87       	std	Y+13, r26	; 0x0d
    271a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	6b 85       	ldd	r22, Y+11	; 0x0b
    271e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2720:	8d 85       	ldd	r24, Y+13	; 0x0d
    2722:	9e 85       	ldd	r25, Y+14	; 0x0e
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a ef       	ldi	r20, 0xFA	; 250
    272a:	54 e4       	ldi	r21, 0x44	; 68
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	8f 83       	std	Y+7, r24	; 0x07
    2736:	98 87       	std	Y+8, r25	; 0x08
    2738:	a9 87       	std	Y+9, r26	; 0x09
    273a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	2c f4       	brge	.+10     	; 0x275e <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	3f c0       	rjmp	.+126    	; 0x27dc <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	57 e4       	ldi	r21, 0x47	; 71
    276e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	4c f5       	brge	.+82     	; 0x27c8 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	6b 85       	ldd	r22, Y+11	; 0x0b
    2778:	7c 85       	ldd	r23, Y+12	; 0x0c
    277a:	8d 85       	ldd	r24, Y+13	; 0x0d
    277c:	9e 85       	ldd	r25, Y+14	; 0x0e
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e2       	ldi	r20, 0x20	; 32
    2784:	51 e4       	ldi	r21, 0x41	; 65
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	0f c0       	rjmp	.+30     	; 0x27be <KEYPAD_getPressedKey+0x192>
    27a0:	88 ec       	ldi	r24, 0xC8	; 200
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <KEYPAD_getPressedKey+0x180>
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	69 f7       	brne	.-38     	; 0x27a0 <KEYPAD_getPressedKey+0x174>
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <KEYPAD_getPressedKey+0x1bc>
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    27f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	8f 87       	std	Y+15, r24	; 0x0f
    27f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f8:	84 30       	cpi	r24, 0x04	; 4
    27fa:	08 f4       	brcc	.+2      	; 0x27fe <KEYPAD_getPressedKey+0x1d2>
    27fc:	4b cf       	rjmp	.-362    	; 0x2694 <KEYPAD_getPressedKey+0x68>
    27fe:	48 cf       	rjmp	.-368    	; 0x2690 <KEYPAD_getPressedKey+0x64>

00002800 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    280e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	3c 83       	std	Y+4, r19	; 0x04
    2818:	2b 83       	std	Y+3, r18	; 0x03
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	88 30       	cpi	r24, 0x08	; 8
    2820:	91 05       	cpc	r25, r1
    2822:	09 f4       	brne	.+2      	; 0x2826 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2824:	70 c0       	rjmp	.+224    	; 0x2906 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2826:	2b 81       	ldd	r18, Y+3	; 0x03
    2828:	3c 81       	ldd	r19, Y+4	; 0x04
    282a:	29 30       	cpi	r18, 0x09	; 9
    282c:	31 05       	cpc	r19, r1
    282e:	5c f5       	brge	.+86     	; 0x2886 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	91 05       	cpc	r25, r1
    2838:	09 f4       	brne	.+2      	; 0x283c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    283a:	59 c0       	rjmp	.+178    	; 0x28ee <KEYPAD_4x4_adjustKeyNumber+0xee>
    283c:	2b 81       	ldd	r18, Y+3	; 0x03
    283e:	3c 81       	ldd	r19, Y+4	; 0x04
    2840:	25 30       	cpi	r18, 0x05	; 5
    2842:	31 05       	cpc	r19, r1
    2844:	9c f4       	brge	.+38     	; 0x286c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	82 30       	cpi	r24, 0x02	; 2
    284c:	91 05       	cpc	r25, r1
    284e:	09 f4       	brne	.+2      	; 0x2852 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2850:	48 c0       	rjmp	.+144    	; 0x28e2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2852:	2b 81       	ldd	r18, Y+3	; 0x03
    2854:	3c 81       	ldd	r19, Y+4	; 0x04
    2856:	23 30       	cpi	r18, 0x03	; 3
    2858:	31 05       	cpc	r19, r1
    285a:	0c f0       	brlt	.+2      	; 0x285e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    285c:	45 c0       	rjmp	.+138    	; 0x28e8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	91 05       	cpc	r25, r1
    2866:	09 f4       	brne	.+2      	; 0x286a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2868:	39 c0       	rjmp	.+114    	; 0x28dc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    286a:	67 c0       	rjmp	.+206    	; 0x293a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    286c:	2b 81       	ldd	r18, Y+3	; 0x03
    286e:	3c 81       	ldd	r19, Y+4	; 0x04
    2870:	26 30       	cpi	r18, 0x06	; 6
    2872:	31 05       	cpc	r19, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2876:	41 c0       	rjmp	.+130    	; 0x28fa <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	87 30       	cpi	r24, 0x07	; 7
    287e:	91 05       	cpc	r25, r1
    2880:	0c f0       	brlt	.+2      	; 0x2884 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2882:	3e c0       	rjmp	.+124    	; 0x2900 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2884:	37 c0       	rjmp	.+110    	; 0x28f4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2886:	2b 81       	ldd	r18, Y+3	; 0x03
    2888:	3c 81       	ldd	r19, Y+4	; 0x04
    288a:	2c 30       	cpi	r18, 0x0C	; 12
    288c:	31 05       	cpc	r19, r1
    288e:	09 f4       	brne	.+2      	; 0x2892 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2890:	46 c0       	rjmp	.+140    	; 0x291e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	8d 30       	cpi	r24, 0x0D	; 13
    2898:	91 05       	cpc	r25, r1
    289a:	5c f4       	brge	.+22     	; 0x28b2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    289c:	2b 81       	ldd	r18, Y+3	; 0x03
    289e:	3c 81       	ldd	r19, Y+4	; 0x04
    28a0:	2a 30       	cpi	r18, 0x0A	; 10
    28a2:	31 05       	cpc	r19, r1
    28a4:	b1 f1       	breq	.+108    	; 0x2912 <KEYPAD_4x4_adjustKeyNumber+0x112>
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	9c 81       	ldd	r25, Y+4	; 0x04
    28aa:	8b 30       	cpi	r24, 0x0B	; 11
    28ac:	91 05       	cpc	r25, r1
    28ae:	a4 f5       	brge	.+104    	; 0x2918 <KEYPAD_4x4_adjustKeyNumber+0x118>
    28b0:	2d c0       	rjmp	.+90     	; 0x290c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    28b2:	2b 81       	ldd	r18, Y+3	; 0x03
    28b4:	3c 81       	ldd	r19, Y+4	; 0x04
    28b6:	2e 30       	cpi	r18, 0x0E	; 14
    28b8:	31 05       	cpc	r19, r1
    28ba:	b9 f1       	breq	.+110    	; 0x292a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	9c 81       	ldd	r25, Y+4	; 0x04
    28c0:	8e 30       	cpi	r24, 0x0E	; 14
    28c2:	91 05       	cpc	r25, r1
    28c4:	7c f1       	brlt	.+94     	; 0x2924 <KEYPAD_4x4_adjustKeyNumber+0x124>
    28c6:	2b 81       	ldd	r18, Y+3	; 0x03
    28c8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ca:	2f 30       	cpi	r18, 0x0F	; 15
    28cc:	31 05       	cpc	r19, r1
    28ce:	79 f1       	breq	.+94     	; 0x292e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	80 31       	cpi	r24, 0x10	; 16
    28d6:	91 05       	cpc	r25, r1
    28d8:	69 f1       	breq	.+90     	; 0x2934 <KEYPAD_4x4_adjustKeyNumber+0x134>
    28da:	2f c0       	rjmp	.+94     	; 0x293a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    28dc:	87 e0       	ldi	r24, 0x07	; 7
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	2e c0       	rjmp	.+92     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    28e2:	88 e0       	ldi	r24, 0x08	; 8
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	2b c0       	rjmp	.+86     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    28e8:	89 e0       	ldi	r24, 0x09	; 9
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	28 c0       	rjmp	.+80     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    28ee:	85 e2       	ldi	r24, 0x25	; 37
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	25 c0       	rjmp	.+74     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    28f4:	84 e0       	ldi	r24, 0x04	; 4
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	22 c0       	rjmp	.+68     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    28fa:	85 e0       	ldi	r24, 0x05	; 5
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	1f c0       	rjmp	.+62     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2900:	86 e0       	ldi	r24, 0x06	; 6
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	1c c0       	rjmp	.+56     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2906:	8a e2       	ldi	r24, 0x2A	; 42
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	19 c0       	rjmp	.+50     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	16 c0       	rjmp	.+44     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	13 c0       	rjmp	.+38     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	10 c0       	rjmp	.+32     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    291e:	8d e2       	ldi	r24, 0x2D	; 45
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	0d c0       	rjmp	.+26     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2924:	8d e0       	ldi	r24, 0x0D	; 13
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	0a c0       	rjmp	.+20     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    292a:	19 82       	std	Y+1, r1	; 0x01
    292c:	08 c0       	rjmp	.+16     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    292e:	8d e3       	ldi	r24, 0x3D	; 61
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	05 c0       	rjmp	.+10     	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2934:	8b e2       	ldi	r24, 0x2B	; 43
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	02 c0       	rjmp	.+4      	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	2e 97       	sbiw	r28, 0x0e	; 14
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	62 e0       	ldi	r22, 0x02	; 2
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a0 ea       	ldi	r26, 0xA0	; 160
    297c:	b1 e4       	ldi	r27, 0x41	; 65
    297e:	8b 87       	std	Y+11, r24	; 0x0b
    2980:	9c 87       	std	Y+12, r25	; 0x0c
    2982:	ad 87       	std	Y+13, r26	; 0x0d
    2984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2986:	6b 85       	ldd	r22, Y+11	; 0x0b
    2988:	7c 85       	ldd	r23, Y+12	; 0x0c
    298a:	8d 85       	ldd	r24, Y+13	; 0x0d
    298c:	9e 85       	ldd	r25, Y+14	; 0x0e
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a ef       	ldi	r20, 0xFA	; 250
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8f 83       	std	Y+7, r24	; 0x07
    29a0:	98 87       	std	Y+8, r25	; 0x08
    29a2:	a9 87       	std	Y+9, r26	; 0x09
    29a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a6:	6f 81       	ldd	r22, Y+7	; 0x07
    29a8:	78 85       	ldd	r23, Y+8	; 0x08
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e8       	ldi	r20, 0x80	; 128
    29b4:	5f e3       	ldi	r21, 0x3F	; 63
    29b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	2c f4       	brge	.+10     	; 0x29c8 <LCD_init+0x7a>
		__ticks = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	3f c0       	rjmp	.+126    	; 0x2a46 <LCD_init+0xf8>
	else if (__tmp > 65535)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	4f e7       	ldi	r20, 0x7F	; 127
    29d6:	57 e4       	ldi	r21, 0x47	; 71
    29d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29dc:	18 16       	cp	r1, r24
    29de:	4c f5       	brge	.+82     	; 0x2a32 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e2       	ldi	r20, 0x20	; 32
    29ee:	51 e4       	ldi	r21, 0x41	; 65
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	0f c0       	rjmp	.+30     	; 0x2a28 <LCD_init+0xda>
    2a0a:	88 ec       	ldi	r24, 0xC8	; 200
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9c 83       	std	Y+4, r25	; 0x04
    2a10:	8b 83       	std	Y+3, r24	; 0x03
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <LCD_init+0xc8>
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	69 f7       	brne	.-38     	; 0x2a0a <LCD_init+0xbc>
    2a30:	14 c0       	rjmp	.+40     	; 0x2a5a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	9a 83       	std	Y+2, r25	; 0x02
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_init+0x104>
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	6f ef       	ldi	r22, 0xFF	; 255
    2a5e:	0e 94 49 12 	call	0x2492	; 0x2492 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2a62:	88 e3       	ldi	r24, 0x38	; 56
    2a64:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2a68:	8c e0       	ldi	r24, 0x0C	; 12
    2a6a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
}
    2a74:	2e 96       	adiw	r28, 0x0e	; 14
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	e9 97       	sbiw	r28, 0x39	; 57
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e8       	ldi	r26, 0x80	; 128
    2aac:	bf e3       	ldi	r27, 0x3F	; 63
    2aae:	8d ab       	std	Y+53, r24	; 0x35
    2ab0:	9e ab       	std	Y+54, r25	; 0x36
    2ab2:	af ab       	std	Y+55, r26	; 0x37
    2ab4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab8:	7e a9       	ldd	r23, Y+54	; 0x36
    2aba:	8f a9       	ldd	r24, Y+55	; 0x37
    2abc:	98 ad       	ldd	r25, Y+56	; 0x38
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a ef       	ldi	r20, 0xFA	; 250
    2ac4:	54 e4       	ldi	r21, 0x44	; 68
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	89 ab       	std	Y+49, r24	; 0x31
    2ad0:	9a ab       	std	Y+50, r25	; 0x32
    2ad2:	ab ab       	std	Y+51, r26	; 0x33
    2ad4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ad6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad8:	7a a9       	ldd	r23, Y+50	; 0x32
    2ada:	8b a9       	ldd	r24, Y+51	; 0x33
    2adc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <LCD_sendCommand+0x72>
		__ticks = 1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	98 ab       	std	Y+48, r25	; 0x30
    2af4:	8f a7       	std	Y+47, r24	; 0x2f
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2af8:	69 a9       	ldd	r22, Y+49	; 0x31
    2afa:	7a a9       	ldd	r23, Y+50	; 0x32
    2afc:	8b a9       	ldd	r24, Y+51	; 0x33
    2afe:	9c a9       	ldd	r25, Y+52	; 0x34
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	4c f5       	brge	.+82     	; 0x2b62 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b10:	6d a9       	ldd	r22, Y+53	; 0x35
    2b12:	7e a9       	ldd	r23, Y+54	; 0x36
    2b14:	8f a9       	ldd	r24, Y+55	; 0x37
    2b16:	98 ad       	ldd	r25, Y+56	; 0x38
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	98 ab       	std	Y+48, r25	; 0x30
    2b36:	8f a7       	std	Y+47, r24	; 0x2f
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <LCD_sendCommand+0xd2>
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9e a7       	std	Y+46, r25	; 0x2e
    2b40:	8d a7       	std	Y+45, r24	; 0x2d
    2b42:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b44:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <LCD_sendCommand+0xc0>
    2b4a:	9e a7       	std	Y+46, r25	; 0x2e
    2b4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b50:	98 a9       	ldd	r25, Y+48	; 0x30
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	98 ab       	std	Y+48, r25	; 0x30
    2b56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f7       	brne	.-38     	; 0x2b3a <LCD_sendCommand+0xb4>
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b62:	69 a9       	ldd	r22, Y+49	; 0x31
    2b64:	7a a9       	ldd	r23, Y+50	; 0x32
    2b66:	8b a9       	ldd	r24, Y+51	; 0x33
    2b68:	9c a9       	ldd	r25, Y+52	; 0x34
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	98 ab       	std	Y+48, r25	; 0x30
    2b74:	8f a7       	std	Y+47, r24	; 0x2f
    2b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b78:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7a:	9c a7       	std	Y+44, r25	; 0x2c
    2b7c:	8b a7       	std	Y+43, r24	; 0x2b
    2b7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b80:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_sendCommand+0xfc>
    2b86:	9c a7       	std	Y+44, r25	; 0x2c
    2b88:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e8       	ldi	r26, 0x80	; 128
    2b9a:	bf e3       	ldi	r27, 0x3F	; 63
    2b9c:	8f a3       	std	Y+39, r24	; 0x27
    2b9e:	98 a7       	std	Y+40, r25	; 0x28
    2ba0:	a9 a7       	std	Y+41, r26	; 0x29
    2ba2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    2baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a ef       	ldi	r20, 0xFA	; 250
    2bb2:	54 e4       	ldi	r21, 0x44	; 68
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	8b a3       	std	Y+35, r24	; 0x23
    2bbe:	9c a3       	std	Y+36, r25	; 0x24
    2bc0:	ad a3       	std	Y+37, r26	; 0x25
    2bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bca:	9e a1       	ldd	r25, Y+38	; 0x26
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <LCD_sendCommand+0x160>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2be6:	6b a1       	ldd	r22, Y+35	; 0x23
    2be8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bea:	8d a1       	ldd	r24, Y+37	; 0x25
    2bec:	9e a1       	ldd	r25, Y+38	; 0x26
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    2c00:	78 a5       	ldd	r23, Y+40	; 0x28
    2c02:	89 a5       	ldd	r24, Y+41	; 0x29
    2c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <LCD_sendCommand+0x1c0>
    2c28:	88 ec       	ldi	r24, 0xC8	; 200
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	98 a3       	std	Y+32, r25	; 0x20
    2c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c32:	98 a1       	ldd	r25, Y+32	; 0x20
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_sendCommand+0x1ae>
    2c38:	98 a3       	std	Y+32, r25	; 0x20
    2c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	89 a1       	ldd	r24, Y+33	; 0x21
    2c48:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <LCD_sendCommand+0x1a2>
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	6b a1       	ldd	r22, Y+35	; 0x23
    2c52:	7c a1       	ldd	r23, Y+36	; 0x24
    2c54:	8d a1       	ldd	r24, Y+37	; 0x25
    2c56:	9e a1       	ldd	r25, Y+38	; 0x26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9a a3       	std	Y+34, r25	; 0x22
    2c62:	89 a3       	std	Y+33, r24	; 0x21
    2c64:	89 a1       	ldd	r24, Y+33	; 0x21
    2c66:	9a a1       	ldd	r25, Y+34	; 0x22
    2c68:	9e 8f       	std	Y+30, r25	; 0x1e
    2c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_sendCommand+0x1ea>
    2c74:	9e 8f       	std	Y+30, r25	; 0x1e
    2c76:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	69 ad       	ldd	r22, Y+57	; 0x39
    2c7c:	0e 94 8d 12 	call	0x251a	; 0x251a <GPIO_writePort>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 e8       	ldi	r26, 0x80	; 128
    2c86:	bf e3       	ldi	r27, 0x3F	; 63
    2c88:	89 8f       	std	Y+25, r24	; 0x19
    2c8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	69 8d       	ldd	r22, Y+25	; 0x19
    2c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4a ef       	ldi	r20, 0xFA	; 250
    2c9e:	54 e4       	ldi	r21, 0x44	; 68
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8d 8b       	std	Y+21, r24	; 0x15
    2caa:	9e 8b       	std	Y+22, r25	; 0x16
    2cac:	af 8b       	std	Y+23, r26	; 0x17
    2cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	5f e3       	ldi	r21, 0x3F	; 63
    2cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	2c f4       	brge	.+10     	; 0x2cd2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
    2cd0:	3f c0       	rjmp	.+126    	; 0x2d50 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	4c f5       	brge	.+82     	; 0x2d3c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	69 8d       	ldd	r22, Y+25	; 0x19
    2cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e2       	ldi	r20, 0x20	; 32
    2cf8:	51 e4       	ldi	r21, 0x41	; 65
    2cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9c 8b       	std	Y+20, r25	; 0x14
    2d10:	8b 8b       	std	Y+19, r24	; 0x13
    2d12:	0f c0       	rjmp	.+30     	; 0x2d32 <LCD_sendCommand+0x2ac>
    2d14:	88 ec       	ldi	r24, 0xC8	; 200
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9a 8b       	std	Y+18, r25	; 0x12
    2d1a:	89 8b       	std	Y+17, r24	; 0x11
    2d1c:	89 89       	ldd	r24, Y+17	; 0x11
    2d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <LCD_sendCommand+0x29a>
    2d24:	9a 8b       	std	Y+18, r25	; 0x12
    2d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d28:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	9c 8b       	std	Y+20, r25	; 0x14
    2d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <LCD_sendCommand+0x28e>
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d40:	8f 89       	ldd	r24, Y+23	; 0x17
    2d42:	98 8d       	ldd	r25, Y+24	; 0x18
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9c 8b       	std	Y+20, r25	; 0x14
    2d4e:	8b 8b       	std	Y+19, r24	; 0x13
    2d50:	8b 89       	ldd	r24, Y+19	; 0x13
    2d52:	9c 89       	ldd	r25, Y+20	; 0x14
    2d54:	98 8b       	std	Y+16, r25	; 0x10
    2d56:	8f 87       	std	Y+15, r24	; 0x0f
    2d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5a:	98 89       	ldd	r25, Y+16	; 0x10
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_sendCommand+0x2d6>
    2d60:	98 8b       	std	Y+16, r25	; 0x10
    2d62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	62 e0       	ldi	r22, 0x02	; 2
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	a0 e8       	ldi	r26, 0x80	; 128
    2d74:	bf e3       	ldi	r27, 0x3F	; 63
    2d76:	8b 87       	std	Y+11, r24	; 0x0b
    2d78:	9c 87       	std	Y+12, r25	; 0x0c
    2d7a:	ad 87       	std	Y+13, r26	; 0x0d
    2d7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	4a ef       	ldi	r20, 0xFA	; 250
    2d8c:	54 e4       	ldi	r21, 0x44	; 68
    2d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	8f 83       	std	Y+7, r24	; 0x07
    2d98:	98 87       	std	Y+8, r25	; 0x08
    2d9a:	a9 87       	std	Y+9, r26	; 0x09
    2d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2da0:	78 85       	ldd	r23, Y+8	; 0x08
    2da2:	89 85       	ldd	r24, Y+9	; 0x09
    2da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e8       	ldi	r20, 0x80	; 128
    2dac:	5f e3       	ldi	r21, 0x3F	; 63
    2dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db2:	88 23       	and	r24, r24
    2db4:	2c f4       	brge	.+10     	; 0x2dc0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	3f c0       	rjmp	.+126    	; 0x2e3e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc2:	78 85       	ldd	r23, Y+8	; 0x08
    2dc4:	89 85       	ldd	r24, Y+9	; 0x09
    2dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	57 e4       	ldi	r21, 0x47	; 71
    2dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd4:	18 16       	cp	r1, r24
    2dd6:	4c f5       	brge	.+82     	; 0x2e2a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e2       	ldi	r20, 0x20	; 32
    2de6:	51 e4       	ldi	r21, 0x41	; 65
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	0f c0       	rjmp	.+30     	; 0x2e20 <LCD_sendCommand+0x39a>
    2e02:	88 ec       	ldi	r24, 0xC8	; 200
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9c 83       	std	Y+4, r25	; 0x04
    2e08:	8b 83       	std	Y+3, r24	; 0x03
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <LCD_sendCommand+0x388>
    2e12:	9c 83       	std	Y+4, r25	; 0x04
    2e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	69 f7       	brne	.-38     	; 0x2e02 <LCD_sendCommand+0x37c>
    2e28:	14 c0       	rjmp	.+40     	; 0x2e52 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2c:	78 85       	ldd	r23, Y+8	; 0x08
    2e2e:	89 85       	ldd	r24, Y+9	; 0x09
    2e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <LCD_sendCommand+0x3c4>
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e52:	e9 96       	adiw	r28, 0x39	; 57
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	e9 97       	sbiw	r28, 0x39	; 57
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	61 e0       	ldi	r22, 0x01	; 1
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	a0 e8       	ldi	r26, 0x80	; 128
    2e8a:	bf e3       	ldi	r27, 0x3F	; 63
    2e8c:	8d ab       	std	Y+53, r24	; 0x35
    2e8e:	9e ab       	std	Y+54, r25	; 0x36
    2e90:	af ab       	std	Y+55, r26	; 0x37
    2e92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e94:	6d a9       	ldd	r22, Y+53	; 0x35
    2e96:	7e a9       	ldd	r23, Y+54	; 0x36
    2e98:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	4a ef       	ldi	r20, 0xFA	; 250
    2ea2:	54 e4       	ldi	r21, 0x44	; 68
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	89 ab       	std	Y+49, r24	; 0x31
    2eae:	9a ab       	std	Y+50, r25	; 0x32
    2eb0:	ab ab       	std	Y+51, r26	; 0x33
    2eb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eba:	9c a9       	ldd	r25, Y+52	; 0x34
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	2c f4       	brge	.+10     	; 0x2ed6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	98 ab       	std	Y+48, r25	; 0x30
    2ed2:	8f a7       	std	Y+47, r24	; 0x2f
    2ed4:	3f c0       	rjmp	.+126    	; 0x2f54 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2ed6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ed8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eda:	8b a9       	ldd	r24, Y+51	; 0x33
    2edc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	4c f5       	brge	.+82     	; 0x2f40 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e2       	ldi	r20, 0x20	; 32
    2efc:	51 e4       	ldi	r21, 0x41	; 65
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	98 ab       	std	Y+48, r25	; 0x30
    2f14:	8f a7       	std	Y+47, r24	; 0x2f
    2f16:	0f c0       	rjmp	.+30     	; 0x2f36 <LCD_displayCharacter+0xd2>
    2f18:	88 ec       	ldi	r24, 0xC8	; 200
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9e a7       	std	Y+46, r25	; 0x2e
    2f1e:	8d a7       	std	Y+45, r24	; 0x2d
    2f20:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f22:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_displayCharacter+0xc0>
    2f28:	9e a7       	std	Y+46, r25	; 0x2e
    2f2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	98 ab       	std	Y+48, r25	; 0x30
    2f34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f38:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	69 f7       	brne	.-38     	; 0x2f18 <LCD_displayCharacter+0xb4>
    2f3e:	14 c0       	rjmp	.+40     	; 0x2f68 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f40:	69 a9       	ldd	r22, Y+49	; 0x31
    2f42:	7a a9       	ldd	r23, Y+50	; 0x32
    2f44:	8b a9       	ldd	r24, Y+51	; 0x33
    2f46:	9c a9       	ldd	r25, Y+52	; 0x34
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	98 ab       	std	Y+48, r25	; 0x30
    2f52:	8f a7       	std	Y+47, r24	; 0x2f
    2f54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f56:	98 a9       	ldd	r25, Y+48	; 0x30
    2f58:	9c a7       	std	Y+44, r25	; 0x2c
    2f5a:	8b a7       	std	Y+43, r24	; 0x2b
    2f5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <LCD_displayCharacter+0xfc>
    2f64:	9c a7       	std	Y+44, r25	; 0x2c
    2f66:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	62 e0       	ldi	r22, 0x02	; 2
    2f6c:	41 e0       	ldi	r20, 0x01	; 1
    2f6e:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	a0 e8       	ldi	r26, 0x80	; 128
    2f78:	bf e3       	ldi	r27, 0x3F	; 63
    2f7a:	8f a3       	std	Y+39, r24	; 0x27
    2f7c:	98 a7       	std	Y+40, r25	; 0x28
    2f7e:	a9 a7       	std	Y+41, r26	; 0x29
    2f80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f82:	6f a1       	ldd	r22, Y+39	; 0x27
    2f84:	78 a5       	ldd	r23, Y+40	; 0x28
    2f86:	89 a5       	ldd	r24, Y+41	; 0x29
    2f88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4a ef       	ldi	r20, 0xFA	; 250
    2f90:	54 e4       	ldi	r21, 0x44	; 68
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	8b a3       	std	Y+35, r24	; 0x23
    2f9c:	9c a3       	std	Y+36, r25	; 0x24
    2f9e:	ad a3       	std	Y+37, r26	; 0x25
    2fa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e8       	ldi	r20, 0x80	; 128
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb6:	88 23       	and	r24, r24
    2fb8:	2c f4       	brge	.+10     	; 0x2fc4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
    2fc2:	3f c0       	rjmp	.+126    	; 0x3042 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fca:	9e a1       	ldd	r25, Y+38	; 0x26
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	4f e7       	ldi	r20, 0x7F	; 127
    2fd2:	57 e4       	ldi	r21, 0x47	; 71
    2fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fd8:	18 16       	cp	r1, r24
    2fda:	4c f5       	brge	.+82     	; 0x302e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    2fde:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e2       	ldi	r20, 0x20	; 32
    2fea:	51 e4       	ldi	r21, 0x41	; 65
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9a a3       	std	Y+34, r25	; 0x22
    3002:	89 a3       	std	Y+33, r24	; 0x21
    3004:	0f c0       	rjmp	.+30     	; 0x3024 <LCD_displayCharacter+0x1c0>
    3006:	88 ec       	ldi	r24, 0xC8	; 200
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	98 a3       	std	Y+32, r25	; 0x20
    300c:	8f 8f       	std	Y+31, r24	; 0x1f
    300e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3010:	98 a1       	ldd	r25, Y+32	; 0x20
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <LCD_displayCharacter+0x1ae>
    3016:	98 a3       	std	Y+32, r25	; 0x20
    3018:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301a:	89 a1       	ldd	r24, Y+33	; 0x21
    301c:	9a a1       	ldd	r25, Y+34	; 0x22
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	9a a3       	std	Y+34, r25	; 0x22
    3022:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3024:	89 a1       	ldd	r24, Y+33	; 0x21
    3026:	9a a1       	ldd	r25, Y+34	; 0x22
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	69 f7       	brne	.-38     	; 0x3006 <LCD_displayCharacter+0x1a2>
    302c:	14 c0       	rjmp	.+40     	; 0x3056 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302e:	6b a1       	ldd	r22, Y+35	; 0x23
    3030:	7c a1       	ldd	r23, Y+36	; 0x24
    3032:	8d a1       	ldd	r24, Y+37	; 0x25
    3034:	9e a1       	ldd	r25, Y+38	; 0x26
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9a a3       	std	Y+34, r25	; 0x22
    3040:	89 a3       	std	Y+33, r24	; 0x21
    3042:	89 a1       	ldd	r24, Y+33	; 0x21
    3044:	9a a1       	ldd	r25, Y+34	; 0x22
    3046:	9e 8f       	std	Y+30, r25	; 0x1e
    3048:	8d 8f       	std	Y+29, r24	; 0x1d
    304a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <LCD_displayCharacter+0x1ea>
    3052:	9e 8f       	std	Y+30, r25	; 0x1e
    3054:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3056:	83 e0       	ldi	r24, 0x03	; 3
    3058:	69 ad       	ldd	r22, Y+57	; 0x39
    305a:	0e 94 8d 12 	call	0x251a	; 0x251a <GPIO_writePort>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	a0 e8       	ldi	r26, 0x80	; 128
    3064:	bf e3       	ldi	r27, 0x3F	; 63
    3066:	89 8f       	std	Y+25, r24	; 0x19
    3068:	9a 8f       	std	Y+26, r25	; 0x1a
    306a:	ab 8f       	std	Y+27, r26	; 0x1b
    306c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306e:	69 8d       	ldd	r22, Y+25	; 0x19
    3070:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3072:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3074:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	4a ef       	ldi	r20, 0xFA	; 250
    307c:	54 e4       	ldi	r21, 0x44	; 68
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	8d 8b       	std	Y+21, r24	; 0x15
    3088:	9e 8b       	std	Y+22, r25	; 0x16
    308a:	af 8b       	std	Y+23, r26	; 0x17
    308c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    308e:	6d 89       	ldd	r22, Y+21	; 0x15
    3090:	7e 89       	ldd	r23, Y+22	; 0x16
    3092:	8f 89       	ldd	r24, Y+23	; 0x17
    3094:	98 8d       	ldd	r25, Y+24	; 0x18
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	8b 8b       	std	Y+19, r24	; 0x13
    30ae:	3f c0       	rjmp	.+126    	; 0x312e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    30b0:	6d 89       	ldd	r22, Y+21	; 0x15
    30b2:	7e 89       	ldd	r23, Y+22	; 0x16
    30b4:	8f 89       	ldd	r24, Y+23	; 0x17
    30b6:	98 8d       	ldd	r25, Y+24	; 0x18
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	4c f5       	brge	.+82     	; 0x311a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e2       	ldi	r20, 0x20	; 32
    30d6:	51 e4       	ldi	r21, 0x41	; 65
    30d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9c 8b       	std	Y+20, r25	; 0x14
    30ee:	8b 8b       	std	Y+19, r24	; 0x13
    30f0:	0f c0       	rjmp	.+30     	; 0x3110 <LCD_displayCharacter+0x2ac>
    30f2:	88 ec       	ldi	r24, 0xC8	; 200
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	9a 8b       	std	Y+18, r25	; 0x12
    30f8:	89 8b       	std	Y+17, r24	; 0x11
    30fa:	89 89       	ldd	r24, Y+17	; 0x11
    30fc:	9a 89       	ldd	r25, Y+18	; 0x12
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <LCD_displayCharacter+0x29a>
    3102:	9a 8b       	std	Y+18, r25	; 0x12
    3104:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3106:	8b 89       	ldd	r24, Y+19	; 0x13
    3108:	9c 89       	ldd	r25, Y+20	; 0x14
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	69 f7       	brne	.-38     	; 0x30f2 <LCD_displayCharacter+0x28e>
    3118:	14 c0       	rjmp	.+40     	; 0x3142 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311a:	6d 89       	ldd	r22, Y+21	; 0x15
    311c:	7e 89       	ldd	r23, Y+22	; 0x16
    311e:	8f 89       	ldd	r24, Y+23	; 0x17
    3120:	98 8d       	ldd	r25, Y+24	; 0x18
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9c 8b       	std	Y+20, r25	; 0x14
    312c:	8b 8b       	std	Y+19, r24	; 0x13
    312e:	8b 89       	ldd	r24, Y+19	; 0x13
    3130:	9c 89       	ldd	r25, Y+20	; 0x14
    3132:	98 8b       	std	Y+16, r25	; 0x10
    3134:	8f 87       	std	Y+15, r24	; 0x0f
    3136:	8f 85       	ldd	r24, Y+15	; 0x0f
    3138:	98 89       	ldd	r25, Y+16	; 0x10
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <LCD_displayCharacter+0x2d6>
    313e:	98 8b       	std	Y+16, r25	; 0x10
    3140:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	62 e0       	ldi	r22, 0x02	; 2
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	0e 94 c3 10 	call	0x2186	; 0x2186 <GPIO_writePin>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a0 e8       	ldi	r26, 0x80	; 128
    3152:	bf e3       	ldi	r27, 0x3F	; 63
    3154:	8b 87       	std	Y+11, r24	; 0x0b
    3156:	9c 87       	std	Y+12, r25	; 0x0c
    3158:	ad 87       	std	Y+13, r26	; 0x0d
    315a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6b 85       	ldd	r22, Y+11	; 0x0b
    315e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3160:	8d 85       	ldd	r24, Y+13	; 0x0d
    3162:	9e 85       	ldd	r25, Y+14	; 0x0e
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a ef       	ldi	r20, 0xFA	; 250
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8f 83       	std	Y+7, r24	; 0x07
    3176:	98 87       	std	Y+8, r25	; 0x08
    3178:	a9 87       	std	Y+9, r26	; 0x09
    317a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    317c:	6f 81       	ldd	r22, Y+7	; 0x07
    317e:	78 85       	ldd	r23, Y+8	; 0x08
    3180:	89 85       	ldd	r24, Y+9	; 0x09
    3182:	9a 85       	ldd	r25, Y+10	; 0x0a
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	3f c0       	rjmp	.+126    	; 0x321c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    319e:	6f 81       	ldd	r22, Y+7	; 0x07
    31a0:	78 85       	ldd	r23, Y+8	; 0x08
    31a2:	89 85       	ldd	r24, Y+9	; 0x09
    31a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <LCD_displayCharacter+0x39a>
    31e0:	88 ec       	ldi	r24, 0xC8	; 200
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	9c 81       	ldd	r25, Y+4	; 0x04
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_displayCharacter+0x388>
    31f0:	9c 83       	std	Y+4, r25	; 0x04
    31f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <LCD_displayCharacter+0x37c>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6f 81       	ldd	r22, Y+7	; 0x07
    320a:	78 85       	ldd	r23, Y+8	; 0x08
    320c:	89 85       	ldd	r24, Y+9	; 0x09
    320e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <LCD_displayCharacter+0x3c4>
    322c:	9a 83       	std	Y+2, r25	; 0x02
    322e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3230:	e9 96       	adiw	r28, 0x39	; 57
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <LCD_displayString+0x6>
    3248:	0f 92       	push	r0
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	9b 83       	std	Y+3, r25	; 0x03
    3250:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3252:	19 82       	std	Y+1, r1	; 0x01
    3254:	0e c0       	rjmp	.+28     	; 0x3272 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	9b 81       	ldd	r25, Y+3	; 0x03
    3260:	fc 01       	movw	r30, r24
    3262:	e2 0f       	add	r30, r18
    3264:	f3 1f       	adc	r31, r19
    3266:	80 81       	ld	r24, Z
    3268:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LCD_displayCharacter>
		i++;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	fc 01       	movw	r30, r24
    327e:	e2 0f       	add	r30, r18
    3280:	f3 1f       	adc	r31, r19
    3282:	80 81       	ld	r24, Z
    3284:	88 23       	and	r24, r24
    3286:	39 f7       	brne	.-50     	; 0x3256 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	cf 91       	pop	r28
    3290:	df 91       	pop	r29
    3292:	08 95       	ret

00003294 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3294:	df 93       	push	r29
    3296:	cf 93       	push	r28
    3298:	00 d0       	rcall	.+0      	; 0x329a <LCD_moveCursor+0x6>
    329a:	00 d0       	rcall	.+0      	; 0x329c <LCD_moveCursor+0x8>
    329c:	0f 92       	push	r0
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	8a 83       	std	Y+2, r24	; 0x02
    32a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    32a6:	8a 81       	ldd	r24, Y+2	; 0x02
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	3d 83       	std	Y+5, r19	; 0x05
    32ae:	2c 83       	std	Y+4, r18	; 0x04
    32b0:	8c 81       	ldd	r24, Y+4	; 0x04
    32b2:	9d 81       	ldd	r25, Y+5	; 0x05
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	91 05       	cpc	r25, r1
    32b8:	c1 f0       	breq	.+48     	; 0x32ea <LCD_moveCursor+0x56>
    32ba:	2c 81       	ldd	r18, Y+4	; 0x04
    32bc:	3d 81       	ldd	r19, Y+5	; 0x05
    32be:	22 30       	cpi	r18, 0x02	; 2
    32c0:	31 05       	cpc	r19, r1
    32c2:	2c f4       	brge	.+10     	; 0x32ce <LCD_moveCursor+0x3a>
    32c4:	8c 81       	ldd	r24, Y+4	; 0x04
    32c6:	9d 81       	ldd	r25, Y+5	; 0x05
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	61 f0       	breq	.+24     	; 0x32e4 <LCD_moveCursor+0x50>
    32cc:	19 c0       	rjmp	.+50     	; 0x3300 <LCD_moveCursor+0x6c>
    32ce:	2c 81       	ldd	r18, Y+4	; 0x04
    32d0:	3d 81       	ldd	r19, Y+5	; 0x05
    32d2:	22 30       	cpi	r18, 0x02	; 2
    32d4:	31 05       	cpc	r19, r1
    32d6:	69 f0       	breq	.+26     	; 0x32f2 <LCD_moveCursor+0x5e>
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	9d 81       	ldd	r25, Y+5	; 0x05
    32dc:	83 30       	cpi	r24, 0x03	; 3
    32de:	91 05       	cpc	r25, r1
    32e0:	61 f0       	breq	.+24     	; 0x32fa <LCD_moveCursor+0x66>
    32e2:	0e c0       	rjmp	.+28     	; 0x3300 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	0b c0       	rjmp	.+22     	; 0x3300 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	80 5c       	subi	r24, 0xC0	; 192
    32ee:	89 83       	std	Y+1, r24	; 0x01
    32f0:	07 c0       	rjmp	.+14     	; 0x3300 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	80 5f       	subi	r24, 0xF0	; 240
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	03 c0       	rjmp	.+6      	; 0x3300 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	80 5b       	subi	r24, 0xB0	; 176
    32fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	80 68       	ori	r24, 0x80	; 128
    3304:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
}
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	00 d0       	rcall	.+0      	; 0x331e <LCD_displayStringRowColumn+0x6>
    331e:	00 d0       	rcall	.+0      	; 0x3320 <LCD_displayStringRowColumn+0x8>
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	6a 83       	std	Y+2, r22	; 0x02
    3328:	5c 83       	std	Y+4, r21	; 0x04
    332a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	6a 81       	ldd	r22, Y+2	; 0x02
    3330:	0e 94 4a 19 	call	0x3294	; 0x3294 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
}
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	62 97       	sbiw	r28, 0x12	; 18
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	9a 8b       	std	Y+18, r25	; 0x12
    3360:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3362:	89 89       	ldd	r24, Y+17	; 0x11
    3364:	9a 89       	ldd	r25, Y+18	; 0x12
    3366:	9e 01       	movw	r18, r28
    3368:	2f 5f       	subi	r18, 0xFF	; 255
    336a:	3f 4f       	sbci	r19, 0xFF	; 255
    336c:	b9 01       	movw	r22, r18
    336e:	4a e0       	ldi	r20, 0x0A	; 10
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <itoa>
   LCD_displayString(buff); /* Display the string */
    3376:	ce 01       	movw	r24, r28
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_displayString>
}
    337e:	62 96       	adiw	r28, 0x12	; 18
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
}
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <PWM_Timer0_Start>:
 * Setup the prescaler with F_CPU/8.
 * Setup the compare value based on the required input duty cycle
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle) {
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <PWM_Timer0_Start+0x6>
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	8a 83       	std	Y+2, r24	; 0x02
	if (duty_cycle == 0) {
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	88 23       	and	r24, r24
    33b4:	51 f4       	brne	.+20     	; 0x33ca <PWM_Timer0_Start+0x26>
		TCNT0 = 0; //Set Timer Initial value
    33b6:	e2 e5       	ldi	r30, 0x52	; 82
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	10 82       	st	Z, r1
		OCR0 = 0;
    33bc:	ec e5       	ldi	r30, 0x5C	; 92
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	10 82       	st	Z, r1
		TCCR0 = 0;
    33c2:	e3 e5       	ldi	r30, 0x53	; 83
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	10 82       	st	Z, r1
    33c8:	29 c0       	rjmp	.+82     	; 0x341c <PWM_Timer0_Start+0x78>
		return;
	}
	uint8 acmpValue = 0; //Compare Value
    33ca:	19 82       	std	Y+1, r1	; 0x01
	acmpValue = (255 * duty_cycle) / 100;
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	48 2f       	mov	r20, r24
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	ca 01       	movw	r24, r20
    33d4:	9c 01       	movw	r18, r24
    33d6:	22 0f       	add	r18, r18
    33d8:	33 1f       	adc	r19, r19
    33da:	c9 01       	movw	r24, r18
    33dc:	96 95       	lsr	r25
    33de:	98 2f       	mov	r25, r24
    33e0:	88 27       	eor	r24, r24
    33e2:	97 95       	ror	r25
    33e4:	87 95       	ror	r24
    33e6:	82 1b       	sub	r24, r18
    33e8:	93 0b       	sbc	r25, r19
    33ea:	84 0f       	add	r24, r20
    33ec:	95 1f       	adc	r25, r21
    33ee:	24 e6       	ldi	r18, 0x64	; 100
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	b9 01       	movw	r22, r18
    33f4:	0e 94 95 1c 	call	0x392a	; 0x392a <__divmodhi4>
    33f8:	cb 01       	movw	r24, r22
    33fa:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    33fc:	e2 e5       	ldi	r30, 0x52	; 82
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	10 82       	st	Z, r1

	OCR0 = acmpValue; // Set Compare Value
    3402:	ec e5       	ldi	r30, 0x5C	; 92
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	80 83       	st	Z, r24

	//set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	63 e0       	ldi	r22, 0x03	; 3
    340e:	41 e0       	ldi	r20, 0x01	; 1
    3410:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    3414:	e3 e5       	ldi	r30, 0x53	; 83
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	8a e6       	ldi	r24, 0x6A	; 106
    341a:	80 83       	st	Z, r24
}
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	64 e0       	ldi	r22, 0x04	; 4
    3432:	41 e0       	ldi	r20, 0x01	; 1
    3434:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	65 e0       	ldi	r22, 0x05	; 5
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	66 e0       	ldi	r22, 0x06	; 6
    3446:	40 e0       	ldi	r20, 0x00	; 0
    3448:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	67 e0       	ldi	r22, 0x07	; 7
    3450:	41 e0       	ldi	r20, 0x01	; 1
    3452:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    3456:	ed e2       	ldi	r30, 0x2D	; 45
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 e5       	ldi	r24, 0x50	; 80
    345c:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    345e:	ae e2       	ldi	r26, 0x2E	; 46
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ee e2       	ldi	r30, 0x2E	; 46
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	8e 7f       	andi	r24, 0xFE	; 254
    346a:	8c 93       	st	X, r24
}
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	64 e0       	ldi	r22, 0x04	; 4
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	65 e0       	ldi	r22, 0x05	; 5
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	66 e0       	ldi	r22, 0x06	; 6
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	67 e0       	ldi	r22, 0x07	; 7
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    34a2:	ed e2       	ldi	r30, 0x2D	; 45
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 e4       	ldi	r24, 0x40	; 64
    34a8:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    34aa:	ae e2       	ldi	r26, 0x2E	; 46
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	ee e2       	ldi	r30, 0x2E	; 46
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	8e 7f       	andi	r24, 0xFE	; 254
    34b6:	8c 93       	st	X, r24
}
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    34ca:	ef e2       	ldi	r30, 0x2F	; 47
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    34d2:	ee e2       	ldi	r30, 0x2E	; 46
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	88 23       	and	r24, r24
    34da:	dc f7       	brge	.-10     	; 0x34d2 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    34dc:	ef e2       	ldi	r30, 0x2F	; 47
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
}
    34e2:	0f 90       	pop	r0
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	08 95       	ret

000034ea <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	00 d0       	rcall	.+0      	; 0x34f0 <SPI_sendString+0x6>
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <SPI_sendString+0x8>
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	9c 83       	std	Y+4, r25	; 0x04
    34f8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    34fa:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    34fc:	19 82       	std	Y+1, r1	; 0x01
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	28 2f       	mov	r18, r24
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	9c 81       	ldd	r25, Y+4	; 0x04
    350a:	fc 01       	movw	r30, r24
    350c:	e2 0f       	add	r30, r18
    350e:	f3 1f       	adc	r31, r19
    3510:	80 81       	ld	r24, Z
    3512:	0e 94 5f 1a 	call	0x34be	; 0x34be <SPI_sendReceiveByte>
    3516:	89 83       	std	Y+1, r24	; 0x01
		i++;
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	8f 5f       	subi	r24, 0xFF	; 255
    351c:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	9c 81       	ldd	r25, Y+4	; 0x04
    3528:	fc 01       	movw	r30, r24
    352a:	e2 0f       	add	r30, r18
    352c:	f3 1f       	adc	r31, r19
    352e:	80 81       	ld	r24, Z
    3530:	88 23       	and	r24, r24
    3532:	31 f7       	brne	.-52     	; 0x3500 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    3542:	0f 93       	push	r16
    3544:	1f 93       	push	r17
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	00 d0       	rcall	.+0      	; 0x354c <SPI_receiveString+0xa>
    354c:	0f 92       	push	r0
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	9b 83       	std	Y+3, r25	; 0x03
    3554:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3556:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    3558:	89 81       	ldd	r24, Y+1	; 0x01
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	9b 81       	ldd	r25, Y+3	; 0x03
    3562:	8c 01       	movw	r16, r24
    3564:	02 0f       	add	r16, r18
    3566:	13 1f       	adc	r17, r19
    3568:	8f ef       	ldi	r24, 0xFF	; 255
    356a:	0e 94 5f 1a 	call	0x34be	; 0x34be <SPI_sendReceiveByte>
    356e:	f8 01       	movw	r30, r16
    3570:	80 83       	st	Z, r24
    3572:	10 c0       	rjmp	.+32     	; 0x3594 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	8f 5f       	subi	r24, 0xFF	; 255
    3578:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	9b 81       	ldd	r25, Y+3	; 0x03
    3584:	8c 01       	movw	r16, r24
    3586:	02 0f       	add	r16, r18
    3588:	13 1f       	adc	r17, r19
    358a:	8f ef       	ldi	r24, 0xFF	; 255
    358c:	0e 94 5f 1a 	call	0x34be	; 0x34be <SPI_sendReceiveByte>
    3590:	f8 01       	movw	r30, r16
    3592:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	fc 01       	movw	r30, r24
    35a0:	e2 0f       	add	r30, r18
    35a2:	f3 1f       	adc	r31, r19
    35a4:	80 81       	ld	r24, Z
    35a6:	83 32       	cpi	r24, 0x23	; 35
    35a8:	29 f7       	brne	.-54     	; 0x3574 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	9b 81       	ldd	r25, Y+3	; 0x03
    35b4:	fc 01       	movw	r30, r24
    35b6:	e2 0f       	add	r30, r18
    35b8:	f3 1f       	adc	r31, r19
    35ba:	10 82       	st	Z, r1
}
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	1f 91       	pop	r17
    35c8:	0f 91       	pop	r16
    35ca:	08 95       	ret

000035cc <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect) {
    35cc:	1f 92       	push	r1
    35ce:	0f 92       	push	r0
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	0f 92       	push	r0
    35d4:	11 24       	eor	r1, r1
    35d6:	2f 93       	push	r18
    35d8:	3f 93       	push	r19
    35da:	4f 93       	push	r20
    35dc:	5f 93       	push	r21
    35de:	6f 93       	push	r22
    35e0:	7f 93       	push	r23
    35e2:	8f 93       	push	r24
    35e4:	9f 93       	push	r25
    35e6:	af 93       	push	r26
    35e8:	bf 93       	push	r27
    35ea:	ef 93       	push	r30
    35ec:	ff 93       	push	r31
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER1_callBack_ptr != NULL_PTR) {
    35f6:	80 91 2c 01 	lds	r24, 0x012C
    35fa:	90 91 2d 01 	lds	r25, 0x012D
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	29 f0       	breq	.+10     	; 0x360c <__vector_7+0x40>
		/* Call the Call Back function in the application interrupt */
		(*g_TIMER1_callBack_ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3602:	e0 91 2c 01 	lds	r30, 0x012C
    3606:	f0 91 2d 01 	lds	r31, 0x012D
    360a:	09 95       	icall
	}
}
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	ff 91       	pop	r31
    3612:	ef 91       	pop	r30
    3614:	bf 91       	pop	r27
    3616:	af 91       	pop	r26
    3618:	9f 91       	pop	r25
    361a:	8f 91       	pop	r24
    361c:	7f 91       	pop	r23
    361e:	6f 91       	pop	r22
    3620:	5f 91       	pop	r21
    3622:	4f 91       	pop	r20
    3624:	3f 91       	pop	r19
    3626:	2f 91       	pop	r18
    3628:	0f 90       	pop	r0
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	0f 90       	pop	r0
    362e:	1f 90       	pop	r1
    3630:	18 95       	reti

00003632 <__vector_9>:
ISR(TIMER1_OVF_vect) {
    3632:	1f 92       	push	r1
    3634:	0f 92       	push	r0
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	0f 92       	push	r0
    363a:	11 24       	eor	r1, r1
    363c:	2f 93       	push	r18
    363e:	3f 93       	push	r19
    3640:	4f 93       	push	r20
    3642:	5f 93       	push	r21
    3644:	6f 93       	push	r22
    3646:	7f 93       	push	r23
    3648:	8f 93       	push	r24
    364a:	9f 93       	push	r25
    364c:	af 93       	push	r26
    364e:	bf 93       	push	r27
    3650:	ef 93       	push	r30
    3652:	ff 93       	push	r31
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER1_callBack_ptr != NULL_PTR) {
    365c:	80 91 2c 01 	lds	r24, 0x012C
    3660:	90 91 2d 01 	lds	r25, 0x012D
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	29 f0       	breq	.+10     	; 0x3672 <__vector_9+0x40>
		/* Call the Call Back function in the application interrupt */
		(*g_TIMER1_callBack_ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3668:	e0 91 2c 01 	lds	r30, 0x012C
    366c:	f0 91 2d 01 	lds	r31, 0x012D
    3670:	09 95       	icall
	}
}
    3672:	cf 91       	pop	r28
    3674:	df 91       	pop	r29
    3676:	ff 91       	pop	r31
    3678:	ef 91       	pop	r30
    367a:	bf 91       	pop	r27
    367c:	af 91       	pop	r26
    367e:	9f 91       	pop	r25
    3680:	8f 91       	pop	r24
    3682:	7f 91       	pop	r23
    3684:	6f 91       	pop	r22
    3686:	5f 91       	pop	r21
    3688:	4f 91       	pop	r20
    368a:	3f 91       	pop	r19
    368c:	2f 91       	pop	r18
    368e:	0f 90       	pop	r0
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	0f 90       	pop	r0
    3694:	1f 90       	pop	r1
    3696:	18 95       	reti

00003698 <Timer1_init>:
 * 	1. Set the required mode.
 * 	2. Set the required initial and compare value.
 * 	2. Set the required prescaler.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const TIMER1_ConfigType *Config_Ptr) {
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <Timer1_init+0x6>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <Timer1_init+0x8>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->mode) {
    36a8:	e9 81       	ldd	r30, Y+1	; 0x01
    36aa:	fa 81       	ldd	r31, Y+2	; 0x02
    36ac:	80 81       	ld	r24, Z
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	3c 83       	std	Y+4, r19	; 0x04
    36b4:	2b 83       	std	Y+3, r18	; 0x03
    36b6:	8b 81       	ldd	r24, Y+3	; 0x03
    36b8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	31 f0       	breq	.+12     	; 0x36ca <Timer1_init+0x32>
    36be:	2b 81       	ldd	r18, Y+3	; 0x03
    36c0:	3c 81       	ldd	r19, Y+4	; 0x04
    36c2:	22 30       	cpi	r18, 0x02	; 2
    36c4:	31 05       	cpc	r19, r1
    36c6:	19 f1       	breq	.+70     	; 0x370e <Timer1_init+0x76>
    36c8:	54 c0       	rjmp	.+168    	; 0x3772 <Timer1_init+0xda>
	case 0: {
		/* Timer1 operates in Normal Mode (Non-PWM) */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    36ca:	ef e4       	ldi	r30, 0x4F	; 79
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	8c e0       	ldi	r24, 0x0C	; 12
    36d0:	80 83       	st	Z, r24
		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->initialValue;
    36d2:	ac e4       	ldi	r26, 0x4C	; 76
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e9 81       	ldd	r30, Y+1	; 0x01
    36d8:	fa 81       	ldd	r31, Y+2	; 0x02
    36da:	81 81       	ldd	r24, Z+1	; 0x01
    36dc:	92 81       	ldd	r25, Z+2	; 0x02
    36de:	11 96       	adiw	r26, 0x01	; 1
    36e0:	9c 93       	st	X, r25
    36e2:	8e 93       	st	-X, r24
		/* Enable the Overflow interrupt to generate an interrupt when the register overflows*/
		SET_BIT(TIMSK, TOIE1);
    36e4:	a9 e5       	ldi	r26, 0x59	; 89
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	e9 e5       	ldi	r30, 0x59	; 89
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	84 60       	ori	r24, 0x04	; 4
    36f0:	8c 93       	st	X, r24
		/* Enable the global interrupt flag*/
		SREG |= (1 << 7);
    36f2:	af e5       	ldi	r26, 0x5F	; 95
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	ef e5       	ldi	r30, 0x5F	; 95
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	80 68       	ori	r24, 0x80	; 128
    36fe:	8c 93       	st	X, r24
		/*insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register*/
		TCCR1B = Config_Ptr->prescaler;
    3700:	ae e4       	ldi	r26, 0x4E	; 78
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	e9 81       	ldd	r30, Y+1	; 0x01
    3706:	fa 81       	ldd	r31, Y+2	; 0x02
    3708:	85 81       	ldd	r24, Z+5	; 0x05
    370a:	8c 93       	st	X, r24
    370c:	32 c0       	rjmp	.+100    	; 0x3772 <Timer1_init+0xda>
		break;
	}
	case 2: {
		/* Timer1 operates in Compare Mode on (Non-PWM) */
		TCCR1A = (1 << FOC1A);
    370e:	ef e4       	ldi	r30, 0x4F	; 79
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	88 e0       	ldi	r24, 0x08	; 8
    3714:	80 83       	st	Z, r24
		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->initialValue;
    3716:	ac e4       	ldi	r26, 0x4C	; 76
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e9 81       	ldd	r30, Y+1	; 0x01
    371c:	fa 81       	ldd	r31, Y+2	; 0x02
    371e:	81 81       	ldd	r24, Z+1	; 0x01
    3720:	92 81       	ldd	r25, Z+2	; 0x02
    3722:	11 96       	adiw	r26, 0x01	; 1
    3724:	9c 93       	st	X, r25
    3726:	8e 93       	st	-X, r24
		/* Compare Value for Timer1 */
		OCR1A = Config_Ptr->compareValue;
    3728:	aa e4       	ldi	r26, 0x4A	; 74
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	e9 81       	ldd	r30, Y+1	; 0x01
    372e:	fa 81       	ldd	r31, Y+2	; 0x02
    3730:	83 81       	ldd	r24, Z+3	; 0x03
    3732:	94 81       	ldd	r25, Z+4	; 0x04
    3734:	11 96       	adiw	r26, 0x01	; 1
    3736:	9c 93       	st	X, r25
    3738:	8e 93       	st	-X, r24
		/* Enable the Timer1 Output Compare A interrupt to generate an interrupt when the register Matches the value */
		TIMSK = (1 << OCIE1A);
    373a:	e9 e5       	ldi	r30, 0x59	; 89
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 e1       	ldi	r24, 0x10	; 16
    3740:	80 83       	st	Z, r24
		/* Enable the global interrupt flag*/
		SREG |= (1 << 7);
    3742:	af e5       	ldi	r26, 0x5F	; 95
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	ef e5       	ldi	r30, 0x5F	; 95
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	80 68       	ori	r24, 0x80	; 128
    374e:	8c 93       	st	X, r24
		/*insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 * and the WGM12 BIT for CTC mode
		 */
		TCCR1B = ((Config_Ptr->mode) << 2) | (Config_Ptr->prescaler);
    3750:	ae e4       	ldi	r26, 0x4E	; 78
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	e9 81       	ldd	r30, Y+1	; 0x01
    3756:	fa 81       	ldd	r31, Y+2	; 0x02
    3758:	80 81       	ld	r24, Z
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	98 2f       	mov	r25, r24
    3768:	e9 81       	ldd	r30, Y+1	; 0x01
    376a:	fa 81       	ldd	r31, Y+2	; 0x02
    376c:	85 81       	ldd	r24, Z+5	; 0x05
    376e:	89 2b       	or	r24, r25
    3770:	8c 93       	st	X, r24
	}
	}
}
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	00 d0       	rcall	.+0      	; 0x3786 <Timer1_setCallBack+0x6>
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	9a 83       	std	Y+2, r25	; 0x02
    378c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_callBack_ptr = a_ptr;
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	9a 81       	ldd	r25, Y+2	; 0x02
    3792:	90 93 2d 01 	sts	0x012D, r25
    3796:	80 93 2c 01 	sts	0x012C, r24
}
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <Timer1_deInit>:

void Timer1_deInit(void) {
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    37ac:	ef e4       	ldi	r30, 0x4F	; 79
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	10 82       	st	Z, r1
	TCNT1 = 0;
    37b2:	ec e4       	ldi	r30, 0x4C	; 76
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	11 82       	std	Z+1, r1	; 0x01
    37b8:	10 82       	st	Z, r1
	OCR1A = 0;
    37ba:	ea e4       	ldi	r30, 0x4A	; 74
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	11 82       	std	Z+1, r1	; 0x01
    37c0:	10 82       	st	Z, r1
	TCCR1B = 0;
    37c2:	ee e4       	ldi	r30, 0x4E	; 78
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	10 82       	st	Z, r1
	/* Disable the Output Compare A interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
    37c8:	a9 e5       	ldi	r26, 0x59	; 89
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	e9 e5       	ldi	r30, 0x59	; 89
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	8f 7e       	andi	r24, 0xEF	; 239
    37d4:	8c 93       	st	X, r24
	/* Disable the Overflow interrupt */
	CLEAR_BIT(TIMSK, TOIE1);
    37d6:	a9 e5       	ldi	r26, 0x59	; 89
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e9 e5       	ldi	r30, 0x59	; 89
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	8b 7f       	andi	r24, 0xFB	; 251
    37e2:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_TIMER1_callBack_ptr = NULL_PTR;
    37e4:	10 92 2d 01 	sts	0x012D, r1
    37e8:	10 92 2c 01 	sts	0x012C, r1
}
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    37fa:	e0 e2       	ldi	r30, 0x20	; 32
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	80 83       	st	Z, r24
	TWSR = 0x00;
    3802:	e1 e2       	ldi	r30, 0x21	; 33
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    3808:	e2 e2       	ldi	r30, 0x22	; 34
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3810:	e6 e5       	ldi	r30, 0x56	; 86
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	84 e0       	ldi	r24, 0x04	; 4
    3816:	80 83       	st	Z, r24
}
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <TWI_start>:

void TWI_start(void)
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3826:	e6 e5       	ldi	r30, 0x56	; 86
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	84 ea       	ldi	r24, 0xA4	; 164
    382c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    382e:	e6 e5       	ldi	r30, 0x56	; 86
    3830:	f0 e0       	ldi	r31, 0x00	; 0
    3832:	80 81       	ld	r24, Z
    3834:	88 23       	and	r24, r24
    3836:	dc f7       	brge	.-10     	; 0x382e <TWI_start+0x10>
}
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <TWI_stop>:

void TWI_stop(void)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3846:	e6 e5       	ldi	r30, 0x56	; 86
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	84 e9       	ldi	r24, 0x94	; 148
    384c:	80 83       	st	Z, r24
}
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3860:	e3 e2       	ldi	r30, 0x23	; 35
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3868:	e6 e5       	ldi	r30, 0x56	; 86
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	84 e8       	ldi	r24, 0x84	; 132
    386e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3870:	e6 e5       	ldi	r30, 0x56	; 86
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	88 23       	and	r24, r24
    3878:	dc f7       	brge	.-10     	; 0x3870 <TWI_writeByte+0x1c>
}
    387a:	0f 90       	pop	r0
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    388a:	e6 e5       	ldi	r30, 0x56	; 86
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	84 ec       	ldi	r24, 0xC4	; 196
    3890:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3892:	e6 e5       	ldi	r30, 0x56	; 86
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	80 81       	ld	r24, Z
    3898:	88 23       	and	r24, r24
    389a:	dc f7       	brge	.-10     	; 0x3892 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    389c:	e3 e2       	ldi	r30, 0x23	; 35
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
}
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    38a8:	df 93       	push	r29
    38aa:	cf 93       	push	r28
    38ac:	cd b7       	in	r28, 0x3d	; 61
    38ae:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    38b0:	e6 e5       	ldi	r30, 0x56	; 86
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	84 e8       	ldi	r24, 0x84	; 132
    38b6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    38b8:	e6 e5       	ldi	r30, 0x56	; 86
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	88 23       	and	r24, r24
    38c0:	dc f7       	brge	.-10     	; 0x38b8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    38c2:	e3 e2       	ldi	r30, 0x23	; 35
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
}
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	08 95       	ret

000038ce <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	0f 92       	push	r0
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    38d8:	e1 e2       	ldi	r30, 0x21	; 33
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	80 81       	ld	r24, Z
    38de:	88 7f       	andi	r24, 0xF8	; 248
    38e0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    38e4:	0f 90       	pop	r0
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <__mulsi3>:
    38ec:	62 9f       	mul	r22, r18
    38ee:	d0 01       	movw	r26, r0
    38f0:	73 9f       	mul	r23, r19
    38f2:	f0 01       	movw	r30, r0
    38f4:	82 9f       	mul	r24, r18
    38f6:	e0 0d       	add	r30, r0
    38f8:	f1 1d       	adc	r31, r1
    38fa:	64 9f       	mul	r22, r20
    38fc:	e0 0d       	add	r30, r0
    38fe:	f1 1d       	adc	r31, r1
    3900:	92 9f       	mul	r25, r18
    3902:	f0 0d       	add	r31, r0
    3904:	83 9f       	mul	r24, r19
    3906:	f0 0d       	add	r31, r0
    3908:	74 9f       	mul	r23, r20
    390a:	f0 0d       	add	r31, r0
    390c:	65 9f       	mul	r22, r21
    390e:	f0 0d       	add	r31, r0
    3910:	99 27       	eor	r25, r25
    3912:	72 9f       	mul	r23, r18
    3914:	b0 0d       	add	r27, r0
    3916:	e1 1d       	adc	r30, r1
    3918:	f9 1f       	adc	r31, r25
    391a:	63 9f       	mul	r22, r19
    391c:	b0 0d       	add	r27, r0
    391e:	e1 1d       	adc	r30, r1
    3920:	f9 1f       	adc	r31, r25
    3922:	bd 01       	movw	r22, r26
    3924:	cf 01       	movw	r24, r30
    3926:	11 24       	eor	r1, r1
    3928:	08 95       	ret

0000392a <__divmodhi4>:
    392a:	97 fb       	bst	r25, 7
    392c:	09 2e       	mov	r0, r25
    392e:	07 26       	eor	r0, r23
    3930:	0a d0       	rcall	.+20     	; 0x3946 <__divmodhi4_neg1>
    3932:	77 fd       	sbrc	r23, 7
    3934:	04 d0       	rcall	.+8      	; 0x393e <__divmodhi4_neg2>
    3936:	0c d0       	rcall	.+24     	; 0x3950 <__udivmodhi4>
    3938:	06 d0       	rcall	.+12     	; 0x3946 <__divmodhi4_neg1>
    393a:	00 20       	and	r0, r0
    393c:	1a f4       	brpl	.+6      	; 0x3944 <__divmodhi4_exit>

0000393e <__divmodhi4_neg2>:
    393e:	70 95       	com	r23
    3940:	61 95       	neg	r22
    3942:	7f 4f       	sbci	r23, 0xFF	; 255

00003944 <__divmodhi4_exit>:
    3944:	08 95       	ret

00003946 <__divmodhi4_neg1>:
    3946:	f6 f7       	brtc	.-4      	; 0x3944 <__divmodhi4_exit>
    3948:	90 95       	com	r25
    394a:	81 95       	neg	r24
    394c:	9f 4f       	sbci	r25, 0xFF	; 255
    394e:	08 95       	ret

00003950 <__udivmodhi4>:
    3950:	aa 1b       	sub	r26, r26
    3952:	bb 1b       	sub	r27, r27
    3954:	51 e1       	ldi	r21, 0x11	; 17
    3956:	07 c0       	rjmp	.+14     	; 0x3966 <__udivmodhi4_ep>

00003958 <__udivmodhi4_loop>:
    3958:	aa 1f       	adc	r26, r26
    395a:	bb 1f       	adc	r27, r27
    395c:	a6 17       	cp	r26, r22
    395e:	b7 07       	cpc	r27, r23
    3960:	10 f0       	brcs	.+4      	; 0x3966 <__udivmodhi4_ep>
    3962:	a6 1b       	sub	r26, r22
    3964:	b7 0b       	sbc	r27, r23

00003966 <__udivmodhi4_ep>:
    3966:	88 1f       	adc	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	5a 95       	dec	r21
    396c:	a9 f7       	brne	.-22     	; 0x3958 <__udivmodhi4_loop>
    396e:	80 95       	com	r24
    3970:	90 95       	com	r25
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	08 95       	ret

00003978 <__prologue_saves__>:
    3978:	2f 92       	push	r2
    397a:	3f 92       	push	r3
    397c:	4f 92       	push	r4
    397e:	5f 92       	push	r5
    3980:	6f 92       	push	r6
    3982:	7f 92       	push	r7
    3984:	8f 92       	push	r8
    3986:	9f 92       	push	r9
    3988:	af 92       	push	r10
    398a:	bf 92       	push	r11
    398c:	cf 92       	push	r12
    398e:	df 92       	push	r13
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	ca 1b       	sub	r28, r26
    39a2:	db 0b       	sbc	r29, r27
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	09 94       	ijmp

000039b0 <__epilogue_restores__>:
    39b0:	2a 88       	ldd	r2, Y+18	; 0x12
    39b2:	39 88       	ldd	r3, Y+17	; 0x11
    39b4:	48 88       	ldd	r4, Y+16	; 0x10
    39b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    39bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    39be:	9b 84       	ldd	r9, Y+11	; 0x0b
    39c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39c2:	b9 84       	ldd	r11, Y+9	; 0x09
    39c4:	c8 84       	ldd	r12, Y+8	; 0x08
    39c6:	df 80       	ldd	r13, Y+7	; 0x07
    39c8:	ee 80       	ldd	r14, Y+6	; 0x06
    39ca:	fd 80       	ldd	r15, Y+5	; 0x05
    39cc:	0c 81       	ldd	r16, Y+4	; 0x04
    39ce:	1b 81       	ldd	r17, Y+3	; 0x03
    39d0:	aa 81       	ldd	r26, Y+2	; 0x02
    39d2:	b9 81       	ldd	r27, Y+1	; 0x01
    39d4:	ce 0f       	add	r28, r30
    39d6:	d1 1d       	adc	r29, r1
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	ed 01       	movw	r28, r26
    39e4:	08 95       	ret

000039e6 <itoa>:
    39e6:	fb 01       	movw	r30, r22
    39e8:	9f 01       	movw	r18, r30
    39ea:	e8 94       	clt
    39ec:	42 30       	cpi	r20, 0x02	; 2
    39ee:	c4 f0       	brlt	.+48     	; 0x3a20 <itoa+0x3a>
    39f0:	45 32       	cpi	r20, 0x25	; 37
    39f2:	b4 f4       	brge	.+44     	; 0x3a20 <itoa+0x3a>
    39f4:	4a 30       	cpi	r20, 0x0A	; 10
    39f6:	29 f4       	brne	.+10     	; 0x3a02 <itoa+0x1c>
    39f8:	97 fb       	bst	r25, 7
    39fa:	1e f4       	brtc	.+6      	; 0x3a02 <itoa+0x1c>
    39fc:	90 95       	com	r25
    39fe:	81 95       	neg	r24
    3a00:	9f 4f       	sbci	r25, 0xFF	; 255
    3a02:	64 2f       	mov	r22, r20
    3a04:	77 27       	eor	r23, r23
    3a06:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    3a0a:	80 5d       	subi	r24, 0xD0	; 208
    3a0c:	8a 33       	cpi	r24, 0x3A	; 58
    3a0e:	0c f0       	brlt	.+2      	; 0x3a12 <itoa+0x2c>
    3a10:	89 5d       	subi	r24, 0xD9	; 217
    3a12:	81 93       	st	Z+, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	a1 f7       	brne	.-24     	; 0x3a02 <itoa+0x1c>
    3a1a:	16 f4       	brtc	.+4      	; 0x3a20 <itoa+0x3a>
    3a1c:	5d e2       	ldi	r21, 0x2D	; 45
    3a1e:	51 93       	st	Z+, r21
    3a20:	10 82       	st	Z, r1
    3a22:	c9 01       	movw	r24, r18
    3a24:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <strrev>

00003a28 <strrev>:
    3a28:	dc 01       	movw	r26, r24
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	67 2f       	mov	r22, r23
    3a2e:	71 91       	ld	r23, Z+
    3a30:	77 23       	and	r23, r23
    3a32:	e1 f7       	brne	.-8      	; 0x3a2c <strrev+0x4>
    3a34:	32 97       	sbiw	r30, 0x02	; 2
    3a36:	04 c0       	rjmp	.+8      	; 0x3a40 <strrev+0x18>
    3a38:	7c 91       	ld	r23, X
    3a3a:	6d 93       	st	X+, r22
    3a3c:	70 83       	st	Z, r23
    3a3e:	62 91       	ld	r22, -Z
    3a40:	ae 17       	cp	r26, r30
    3a42:	bf 07       	cpc	r27, r31
    3a44:	c8 f3       	brcs	.-14     	; 0x3a38 <strrev+0x10>
    3a46:	08 95       	ret

00003a48 <_exit>:
    3a48:	f8 94       	cli

00003a4a <__stop_program>:
    3a4a:	ff cf       	rjmp	.-2      	; 0x3a4a <__stop_program>
